
Chatting_through_terminals.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000003fa  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e84  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086f  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a8  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f1  00000000  00000000  00002d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000033f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/UART/UART.h"

#define SLAVE_0		0

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	ca 50       	subi	r28, 0x0A	; 10
  9c:	d1 40       	sbci	r29, 0x01	; 1
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61

	ST_UARTConfig_t UartConfig = {FREQ_1MHz,BAUD_4800,NO_PARITY,DISABLE_RX_INT,DISABLE_TX_INT};
  a8:	8b e0       	ldi	r24, 0x0B	; 11
  aa:	e0 e6       	ldi	r30, 0x60	; 96
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x20>
	SPI_Master_Init(DIVISOR_16);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 9d 00 	call	0x13a	; 0x13a <SPI_Master_Init>
	UART_Init(UartConfig);
  c0:	e9 80       	ldd	r14, Y+1	; 0x01
  c2:	fa 80       	ldd	r15, Y+2	; 0x02
  c4:	0b 81       	ldd	r16, Y+3	; 0x03
  c6:	1c 81       	ldd	r17, Y+4	; 0x04
  c8:	2d 81       	ldd	r18, Y+5	; 0x05
  ca:	3e 81       	ldd	r19, Y+6	; 0x06
  cc:	4f 81       	ldd	r20, Y+7	; 0x07
  ce:	58 85       	ldd	r21, Y+8	; 0x08
  d0:	69 85       	ldd	r22, Y+9	; 0x09
  d2:	7a 85       	ldd	r23, Y+10	; 0x0a
  d4:	8b 85       	ldd	r24, Y+11	; 0x0b
  d6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <UART_Init>
	sint8_t recieved_string[UART_MAX_STRING_SIZE];
	
	
    while (1) 
    {
		UART_ReceiveString(recieved_string);
  da:	ce 01       	movw	r24, r28
  dc:	0c 96       	adiw	r24, 0x0c	; 12
  de:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_ReceiveString>
		SPI_Master_SendString(recieved_string,SLAVE_0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	ce 01       	movw	r24, r28
  e6:	0c 96       	adiw	r24, 0x0c	; 12
  e8:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_Master_SendString>
		SPI_Master_SendByte(SPI_END_OF_STRING,SLAVE_0);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 b5 00 	call	0x16a	; 0x16a <SPI_Master_SendByte>
  f4:	f2 cf       	rjmp	.-28     	; 0xda <main+0x48>

000000f6 <Adjust_Freq>:
		read_data = SPI_DATA_REG;
	}
	
	return(read_data);

}
  f6:	80 ff       	sbrs	r24, 0
  f8:	05 c0       	rjmp	.+10     	; 0x104 <Adjust_Freq+0xe>
  fa:	9d b1       	in	r25, 0x0d	; 13
  fc:	9d b1       	in	r25, 0x0d	; 13
  fe:	91 60       	ori	r25, 0x01	; 1
 100:	9d b9       	out	0x0d, r25	; 13
 102:	04 c0       	rjmp	.+8      	; 0x10c <Adjust_Freq+0x16>
 104:	9d b1       	in	r25, 0x0d	; 13
 106:	9d b1       	in	r25, 0x0d	; 13
 108:	9e 7f       	andi	r25, 0xFE	; 254
 10a:	9d b9       	out	0x0d, r25	; 13
 10c:	81 ff       	sbrs	r24, 1
 10e:	05 c0       	rjmp	.+10     	; 0x11a <Adjust_Freq+0x24>
 110:	9d b1       	in	r25, 0x0d	; 13
 112:	9d b1       	in	r25, 0x0d	; 13
 114:	92 60       	ori	r25, 0x02	; 2
 116:	9d b9       	out	0x0d, r25	; 13
 118:	04 c0       	rjmp	.+8      	; 0x122 <Adjust_Freq+0x2c>
 11a:	9d b1       	in	r25, 0x0d	; 13
 11c:	9d b1       	in	r25, 0x0d	; 13
 11e:	9d 7f       	andi	r25, 0xFD	; 253
 120:	9d b9       	out	0x0d, r25	; 13
 122:	82 ff       	sbrs	r24, 2
 124:	05 c0       	rjmp	.+10     	; 0x130 <Adjust_Freq+0x3a>
 126:	8e b1       	in	r24, 0x0e	; 14
 128:	8e b1       	in	r24, 0x0e	; 14
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8e b9       	out	0x0e, r24	; 14
 12e:	08 95       	ret
 130:	8e b1       	in	r24, 0x0e	; 14
 132:	8e b1       	in	r24, 0x0e	; 14
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	8e b9       	out	0x0e, r24	; 14
 138:	08 95       	ret

0000013a <SPI_Master_Init>:
 13a:	97 b3       	in	r25, 0x17	; 23
 13c:	90 62       	ori	r25, 0x20	; 32
 13e:	97 bb       	out	0x17, r25	; 23
 140:	97 b3       	in	r25, 0x17	; 23
 142:	90 68       	ori	r25, 0x80	; 128
 144:	97 bb       	out	0x17, r25	; 23
 146:	97 b3       	in	r25, 0x17	; 23
 148:	90 61       	ori	r25, 0x10	; 16
 14a:	97 bb       	out	0x17, r25	; 23
 14c:	97 b3       	in	r25, 0x17	; 23
 14e:	9f 7b       	andi	r25, 0xBF	; 191
 150:	97 bb       	out	0x17, r25	; 23
 152:	98 b3       	in	r25, 0x18	; 24
 154:	90 61       	ori	r25, 0x10	; 16
 156:	98 bb       	out	0x18, r25	; 24
 158:	0e 94 7b 00 	call	0xf6	; 0xf6 <Adjust_Freq>
 15c:	8d b1       	in	r24, 0x0d	; 13
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	8d b9       	out	0x0d, r24	; 13
 162:	8d b1       	in	r24, 0x0d	; 13
 164:	80 61       	ori	r24, 0x10	; 16
 166:	8d b9       	out	0x0d, r24	; 13
 168:	08 95       	ret

0000016a <SPI_Master_SendByte>:
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	0c c0       	rjmp	.+24     	; 0x186 <SPI_Master_SendByte+0x1c>
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	9f 7e       	andi	r25, 0xEF	; 239
 172:	98 bb       	out	0x18, r25	; 24
 174:	8f b9       	out	0x0f, r24	; 15
 176:	9e b1       	in	r25, 0x0e	; 14
 178:	77 9b       	sbis	0x0e, 7	; 14
 17a:	fd cf       	rjmp	.-6      	; 0x176 <SPI_Master_SendByte+0xc>
 17c:	9f b1       	in	r25, 0x0f	; 15
 17e:	98 b3       	in	r25, 0x18	; 24
 180:	90 61       	ori	r25, 0x10	; 16
 182:	98 bb       	out	0x18, r25	; 24
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	62 17       	cp	r22, r18
 188:	90 f7       	brcc	.-28     	; 0x16e <SPI_Master_SendByte+0x4>
 18a:	08 95       	ret

0000018c <SPI_Master_SendString>:
*Function to send string to selected slave according to daisy chain connection
*inputs: sint8_t * data to send points to array of MAX_CHARS defined in .h file , uint8_t Slave number in connection
*void return
*/
void SPI_Master_SendString(sint8_t *str,uint8_t SlaveID)
{
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	8c 01       	movw	r16, r24
 196:	d6 2f       	mov	r29, r22
	uint8_t character=0;
	
	for (character=0; str[character]!='\0';character++){
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <SPI_Master_SendString+0x18>
		SPI_Master_SendByte(str[character],SlaveID);
 19c:	6d 2f       	mov	r22, r29
 19e:	0e 94 b5 00 	call	0x16a	; 0x16a <SPI_Master_SendByte>
*/
void SPI_Master_SendString(sint8_t *str,uint8_t SlaveID)
{
	uint8_t character=0;
	
	for (character=0; str[character]!='\0';character++){
 1a2:	cf 5f       	subi	r28, 0xFF	; 255
 1a4:	f8 01       	movw	r30, r16
 1a6:	ec 0f       	add	r30, r28
 1a8:	f1 1d       	adc	r31, r1
 1aa:	80 81       	ld	r24, Z
 1ac:	81 11       	cpse	r24, r1
 1ae:	f6 cf       	rjmp	.-20     	; 0x19c <SPI_Master_SendString+0x10>
		SPI_Master_SendByte(str[character],SlaveID);
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <UART_Init>:
*inputs: adrress of function to call every transmission complete
*return: none
*
*/
void UART_SetTXCompleteISR(void (*function)(void)){
	TX_ISR = function;
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	2b 97       	sbiw	r28, 0x0b	; 11
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	e9 82       	std	Y+1, r14	; 0x01
 1d8:	fa 82       	std	Y+2, r15	; 0x02
 1da:	0b 83       	std	Y+3, r16	; 0x03
 1dc:	1c 83       	std	Y+4, r17	; 0x04
 1de:	2d 83       	std	Y+5, r18	; 0x05
 1e0:	3e 83       	std	Y+6, r19	; 0x06
 1e2:	4f 83       	std	Y+7, r20	; 0x07
 1e4:	58 87       	std	Y+8, r21	; 0x08
 1e6:	69 87       	std	Y+9, r22	; 0x09
 1e8:	7a 87       	std	Y+10, r23	; 0x0a
 1ea:	8b 87       	std	Y+11, r24	; 0x0b
 1ec:	69 81       	ldd	r22, Y+1	; 0x01
 1ee:	7a 81       	ldd	r23, Y+2	; 0x02
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	9c 81       	ldd	r25, Y+4	; 0x04
 1f4:	0d 81       	ldd	r16, Y+5	; 0x05
 1f6:	1e 81       	ldd	r17, Y+6	; 0x06
 1f8:	2f 81       	ldd	r18, Y+7	; 0x07
 1fa:	38 85       	ldd	r19, Y+8	; 0x08
 1fc:	00 0f       	add	r16, r16
 1fe:	11 1f       	adc	r17, r17
 200:	22 1f       	adc	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	00 0f       	add	r16, r16
 206:	11 1f       	adc	r17, r17
 208:	22 1f       	adc	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	a9 01       	movw	r20, r18
 20e:	98 01       	movw	r18, r16
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	44 1f       	adc	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	44 1f       	adc	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__udivmodsi4>
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
 228:	8a b1       	in	r24, 0x0a	; 10
 22a:	80 61       	ori	r24, 0x10	; 16
 22c:	8a b9       	out	0x0a, r24	; 10
 22e:	8a b1       	in	r24, 0x0a	; 10
 230:	88 60       	ori	r24, 0x08	; 8
 232:	8a b9       	out	0x0a, r24	; 10
 234:	29 b9       	out	0x09, r18	; 9
 236:	80 b5       	in	r24, 0x20	; 32
 238:	8f 77       	andi	r24, 0x7F	; 127
 23a:	80 bd       	out	0x20, r24	; 32
 23c:	30 bd       	out	0x20, r19	; 32
 23e:	80 b5       	in	r24, 0x20	; 32
 240:	80 68       	ori	r24, 0x80	; 128
 242:	80 bd       	out	0x20, r24	; 32
 244:	80 b5       	in	r24, 0x20	; 32
 246:	8f 7b       	andi	r24, 0xBF	; 191
 248:	80 bd       	out	0x20, r24	; 32
 24a:	89 85       	ldd	r24, Y+9	; 0x09
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	39 f4       	brne	.+14     	; 0x25e <UART_Init+0xa4>
 250:	80 b5       	in	r24, 0x20	; 32
 252:	80 62       	ori	r24, 0x20	; 32
 254:	80 bd       	out	0x20, r24	; 32
 256:	80 b5       	in	r24, 0x20	; 32
 258:	8f 7e       	andi	r24, 0xEF	; 239
 25a:	80 bd       	out	0x20, r24	; 32
 25c:	11 c0       	rjmp	.+34     	; 0x280 <UART_Init+0xc6>
 25e:	81 11       	cpse	r24, r1
 260:	07 c0       	rjmp	.+14     	; 0x270 <UART_Init+0xb6>
 262:	80 b5       	in	r24, 0x20	; 32
 264:	80 62       	ori	r24, 0x20	; 32
 266:	80 bd       	out	0x20, r24	; 32
 268:	80 b5       	in	r24, 0x20	; 32
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	80 bd       	out	0x20, r24	; 32
 26e:	08 c0       	rjmp	.+16     	; 0x280 <UART_Init+0xc6>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	31 f4       	brne	.+12     	; 0x280 <UART_Init+0xc6>
 274:	80 b5       	in	r24, 0x20	; 32
 276:	8f 7d       	andi	r24, 0xDF	; 223
 278:	80 bd       	out	0x20, r24	; 32
 27a:	80 b5       	in	r24, 0x20	; 32
 27c:	8f 7e       	andi	r24, 0xEF	; 239
 27e:	80 bd       	out	0x20, r24	; 32
 280:	80 b5       	in	r24, 0x20	; 32
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 bd       	out	0x20, r24	; 32
 286:	80 b5       	in	r24, 0x20	; 32
 288:	84 60       	ori	r24, 0x04	; 4
 28a:	80 bd       	out	0x20, r24	; 32
 28c:	8a 85       	ldd	r24, Y+10	; 0x0a
 28e:	81 11       	cpse	r24, r1
 290:	06 c0       	rjmp	.+12     	; 0x29e <UART_Init+0xe4>
 292:	8f b7       	in	r24, 0x3f	; 63
 294:	80 68       	ori	r24, 0x80	; 128
 296:	8f bf       	out	0x3f, r24	; 63
 298:	8a b1       	in	r24, 0x0a	; 10
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	8a b9       	out	0x0a, r24	; 10
 29e:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a0:	81 11       	cpse	r24, r1
 2a2:	06 c0       	rjmp	.+12     	; 0x2b0 <UART_Init+0xf6>
 2a4:	8f b7       	in	r24, 0x3f	; 63
 2a6:	80 68       	ori	r24, 0x80	; 128
 2a8:	8f bf       	out	0x3f, r24	; 63
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	80 64       	ori	r24, 0x40	; 64
 2ae:	8a b9       	out	0x0a, r24	; 10
 2b0:	2b 96       	adiw	r28, 0x0b	; 11
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	08 95       	ret

000002ca <UART_ReceiveByte>:
 2ca:	5f 9b       	sbis	0x0b, 7	; 11
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <UART_ReceiveByte>
 2ce:	8c b1       	in	r24, 0x0c	; 12
 2d0:	08 95       	ret

000002d2 <UART_ReceiveString>:
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	7c 01       	movw	r14, r24
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	0c c0       	rjmp	.+24     	; 0x2fa <UART_ReceiveString+0x28>
 2e2:	87 01       	movw	r16, r14
 2e4:	0c 0f       	add	r16, r28
 2e6:	11 1d       	adc	r17, r1
 2e8:	0e 94 65 01 	call	0x2ca	; 0x2ca <UART_ReceiveByte>
 2ec:	f8 01       	movw	r30, r16
 2ee:	80 83       	st	Z, r24
 2f0:	8d 30       	cpi	r24, 0x0D	; 13
 2f2:	11 f4       	brne	.+4      	; 0x2f8 <UART_ReceiveString+0x26>
 2f4:	10 82       	st	Z, r1
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <UART_ReceiveString+0x2c>
 2f8:	cf 5f       	subi	r28, 0xFF	; 255
 2fa:	cf 3f       	cpi	r28, 0xFF	; 255
 2fc:	91 f7       	brne	.-28     	; 0x2e2 <UART_ReceiveString+0x10>
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	08 95       	ret

0000030a <__vector_13>:
}


/*ISRs*/
void __vector_13(){
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
	RX_ISR();
 32c:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 330:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0x1>
 334:	09 95       	icall
	SETBIT(UCSRA,7);
 336:	8b b1       	in	r24, 0x0b	; 11
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	8b b9       	out	0x0b, r24	; 11
}
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <__vector_15>:

void __vector_15(){
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	2f 93       	push	r18
 36a:	3f 93       	push	r19
 36c:	4f 93       	push	r20
 36e:	5f 93       	push	r21
 370:	6f 93       	push	r22
 372:	7f 93       	push	r23
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
 37c:	ef 93       	push	r30
 37e:	ff 93       	push	r31
	TX_ISR();
 380:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <TX_ISR>
 384:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <TX_ISR+0x1>
 388:	09 95       	icall
	SETBIT(UCSRA,6);
 38a:	8b b1       	in	r24, 0x0b	; 11
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	8b b9       	out	0x0b, r24	; 11

}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <__udivmodsi4>:
 3b2:	a1 e2       	ldi	r26, 0x21	; 33
 3b4:	1a 2e       	mov	r1, r26
 3b6:	aa 1b       	sub	r26, r26
 3b8:	bb 1b       	sub	r27, r27
 3ba:	fd 01       	movw	r30, r26
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <__udivmodsi4_ep>

000003be <__udivmodsi4_loop>:
 3be:	aa 1f       	adc	r26, r26
 3c0:	bb 1f       	adc	r27, r27
 3c2:	ee 1f       	adc	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	a2 17       	cp	r26, r18
 3c8:	b3 07       	cpc	r27, r19
 3ca:	e4 07       	cpc	r30, r20
 3cc:	f5 07       	cpc	r31, r21
 3ce:	20 f0       	brcs	.+8      	; 0x3d8 <__udivmodsi4_ep>
 3d0:	a2 1b       	sub	r26, r18
 3d2:	b3 0b       	sbc	r27, r19
 3d4:	e4 0b       	sbc	r30, r20
 3d6:	f5 0b       	sbc	r31, r21

000003d8 <__udivmodsi4_ep>:
 3d8:	66 1f       	adc	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	1a 94       	dec	r1
 3e2:	69 f7       	brne	.-38     	; 0x3be <__udivmodsi4_loop>
 3e4:	60 95       	com	r22
 3e6:	70 95       	com	r23
 3e8:	80 95       	com	r24
 3ea:	90 95       	com	r25
 3ec:	9b 01       	movw	r18, r22
 3ee:	ac 01       	movw	r20, r24
 3f0:	bd 01       	movw	r22, r26
 3f2:	cf 01       	movw	r24, r30
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
