
Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  0000068c  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000d2  008000d2  00000792  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001627  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2b  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ff  00000000  00000000  000029a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  000032a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072a  00000000  00000000  00003d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3d       	cpi	r26, 0xD2	; 210
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ed       	ldi	r26, 0xD2	; 210
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3d       	cpi	r26, 0xD7	; 215
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  8a:	0c 94 44 03 	jmp	0x688	; 0x688 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_Init>:
ST_LED_CONFIG_t LED_YELLOW = {PORTA,PIN1,ACTIVE_HIGH};
ST_LED_CONFIG_t LED_GREEN = {PORTA,PIN2,ACTIVE_HIGH};

EN_STATES_t State;
	
void App_Init(){
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	2b 97       	sbiw	r28, 0x0b	; 11
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	ST_UARTConfig_t uart_config = {FREQ_8MHz,BAUD_9600,NO_PARITY,DISABLE_RX_INT,DISABLE_TX_INT};
  ae:	8b e0       	ldi	r24, 0x0B	; 11
  b0:	e9 e6       	ldi	r30, 0x69	; 105
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <App_Init+0x26>

	/*driver initialization*/
	UART_Init(uart_config);
  c0:	e9 80       	ldd	r14, Y+1	; 0x01
  c2:	fa 80       	ldd	r15, Y+2	; 0x02
  c4:	0b 81       	ldd	r16, Y+3	; 0x03
  c6:	1c 81       	ldd	r17, Y+4	; 0x04
  c8:	2d 81       	ldd	r18, Y+5	; 0x05
  ca:	3e 81       	ldd	r19, Y+6	; 0x06
  cc:	4f 81       	ldd	r20, Y+7	; 0x07
  ce:	58 85       	ldd	r21, Y+8	; 0x08
  d0:	69 85       	ldd	r22, Y+9	; 0x09
  d2:	7a 85       	ldd	r23, Y+10	; 0x0a
  d4:	8b 85       	ldd	r24, Y+11	; 0x0b
  d6:	0e 94 03 02 	call	0x406	; 0x406 <UART_Init>
	LED_init(LED_RED);
  da:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LED_RED>
  de:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LED_RED+0x1>
  e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LED_RED+0x2>
  e6:	0e 94 80 01 	call	0x300	; 0x300 <LED_init>
	LED_init(LED_YELLOW);
  ea:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <LED_YELLOW>
  ee:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <LED_YELLOW+0x1>
  f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <LED_YELLOW+0x2>
  f6:	0e 94 80 01 	call	0x300	; 0x300 <LED_init>
	LED_init(LED_GREEN);
  fa:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fe:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 106:	0e 94 80 01 	call	0x300	; 0x300 <LED_init>
	/*initial state*/
	State = GREEN;
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__data_end>
} 
 110:	2b 96       	adiw	r28, 0x0b	; 11
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	08 95       	ret

0000012a <update_states>:
	
}

void update_states(){
	/*states implementation*/
	switch (State){
 12a:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__data_end>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	09 f4       	brne	.+2      	; 0x134 <update_states+0xa>
 132:	55 c0       	rjmp	.+170    	; 0x1de <update_states+0xb4>
 134:	28 f4       	brcc	.+10     	; 0x140 <update_states+0x16>
 136:	88 23       	and	r24, r24
 138:	51 f0       	breq	.+20     	; 0x14e <update_states+0x24>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	61 f1       	breq	.+88     	; 0x196 <update_states+0x6c>
 13e:	08 95       	ret
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	09 f4       	brne	.+2      	; 0x146 <update_states+0x1c>
 144:	70 c0       	rjmp	.+224    	; 0x226 <update_states+0xfc>
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	09 f4       	brne	.+2      	; 0x14c <update_states+0x22>
 14a:	79 c0       	rjmp	.+242    	; 0x23e <update_states+0x114>
 14c:	08 95       	ret
		case RED:
			LED_ON(LED_RED);
 14e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LED_RED>
 152:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LED_RED+0x1>
 156:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LED_RED+0x2>
 15a:	0e 94 86 01 	call	0x30c	; 0x30c <LED_ON>
			LED_OFF(LED_GREEN);
 15e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 162:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 16a:	0e 94 95 01 	call	0x32a	; 0x32a <LED_OFF>
			LED_OFF(LED_YELLOW);
 16e:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <LED_YELLOW>
 172:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <LED_YELLOW+0x1>
 176:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <LED_YELLOW+0x2>
 17a:	0e 94 95 01 	call	0x32a	; 0x32a <LED_OFF>
			UART_SendString(" RED LED ON ");		
 17e:	84 e7       	ldi	r24, 0x74	; 116
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>
			UART_SendByte(END_OF_STRING);				/*begin a new line*/
 186:	8d e0       	ldi	r24, 0x0D	; 13
 188:	0e 94 8b 02 	call	0x516	; 0x516 <UART_SendByte>
			UART_SendString("-> ");						/*start of a new command layout*/
 18c:	81 e8       	ldi	r24, 0x81	; 129
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>

			break;
 194:	08 95       	ret
		case YELLOW:
			LED_OFF(LED_RED);
 196:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LED_RED>
 19a:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LED_RED+0x1>
 19e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LED_RED+0x2>
 1a2:	0e 94 95 01 	call	0x32a	; 0x32a <LED_OFF>
			LED_OFF(LED_GREEN);
 1a6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1aa:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1b2:	0e 94 95 01 	call	0x32a	; 0x32a <LED_OFF>
			LED_ON(LED_YELLOW);
 1b6:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <LED_YELLOW>
 1ba:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <LED_YELLOW+0x1>
 1be:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <LED_YELLOW+0x2>
 1c2:	0e 94 86 01 	call	0x30c	; 0x30c <LED_ON>
			UART_SendString(" YELLOW LED ON ");
 1c6:	85 e8       	ldi	r24, 0x85	; 133
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>
			UART_SendByte(END_OF_STRING);
 1ce:	8d e0       	ldi	r24, 0x0D	; 13
 1d0:	0e 94 8b 02 	call	0x516	; 0x516 <UART_SendByte>
			UART_SendString("-> ");
 1d4:	81 e8       	ldi	r24, 0x81	; 129
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>

			break;
 1dc:	08 95       	ret
		case GREEN:
			LED_OFF(LED_RED);
 1de:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LED_RED>
 1e2:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LED_RED+0x1>
 1e6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LED_RED+0x2>
 1ea:	0e 94 95 01 	call	0x32a	; 0x32a <LED_OFF>
			LED_ON(LED_GREEN);
 1ee:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1fa:	0e 94 86 01 	call	0x30c	; 0x30c <LED_ON>
			LED_OFF(LED_YELLOW);
 1fe:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <LED_YELLOW>
 202:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <LED_YELLOW+0x1>
 206:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <LED_YELLOW+0x2>
 20a:	0e 94 95 01 	call	0x32a	; 0x32a <LED_OFF>
			UART_SendString(" GREEN LED ON ");
 20e:	85 e9       	ldi	r24, 0x95	; 149
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>
			UART_SendByte(END_OF_STRING);
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	0e 94 8b 02 	call	0x516	; 0x516 <UART_SendByte>
			UART_SendString("-> ");
 21c:	81 e8       	ldi	r24, 0x81	; 129
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>

			break;
 224:	08 95       	ret
		case AT:
			UART_SendString(" OK ");
 226:	84 ea       	ldi	r24, 0xA4	; 164
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>
			UART_SendByte(END_OF_STRING);
 22e:	8d e0       	ldi	r24, 0x0D	; 13
 230:	0e 94 8b 02 	call	0x516	; 0x516 <UART_SendByte>
			UART_SendString("-> ");
 234:	81 e8       	ldi	r24, 0x81	; 129
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>

			break;
 23c:	08 95       	ret
		case ERROR:
			UART_SendString(" NOT DEFINED COMMAND ");
 23e:	89 ea       	ldi	r24, 0xA9	; 169
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>
			UART_SendByte(END_OF_STRING);
 246:	8d e0       	ldi	r24, 0x0D	; 13
 248:	0e 94 8b 02 	call	0x516	; 0x516 <UART_SendByte>
			UART_SendString("-> ");
 24c:	81 e8       	ldi	r24, 0x81	; 129
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 96 02 	call	0x52c	; 0x52c <UART_SendString>
 254:	08 95       	ret

00000256 <App>:
	/*initial state*/
	State = GREEN;
} 

/*app logic*/
void App(){
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	2f 97       	sbiw	r28, 0x0f	; 15
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
	
	sint8_t recieve_from_tx[15] = {'\0'};
 26e:	8e 01       	movw	r16, r28
 270:	0f 5f       	subi	r16, 0xFF	; 255
 272:	1f 4f       	sbci	r17, 0xFF	; 255
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	f8 01       	movw	r30, r16
 278:	11 92       	st	Z+, r1
 27a:	8a 95       	dec	r24
 27c:	e9 f7       	brne	.-6      	; 0x278 <App+0x22>
	
	update_states();						
 27e:	0e 94 95 00 	call	0x12a	; 0x12a <update_states>
	UART_ReceiveString(recieve_from_tx);
 282:	c8 01       	movw	r24, r16
 284:	0e 94 a9 02 	call	0x552	; 0x552 <UART_ReceiveString>
	
	if ( strcmp(recieve_from_tx,"WAIT")==0){				/*change states according to input*/
 288:	6f eb       	ldi	r22, 0xBF	; 191
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	c8 01       	movw	r24, r16
 28e:	0e 94 3b 03 	call	0x676	; 0x676 <strcmp>
 292:	89 2b       	or	r24, r25
 294:	21 f4       	brne	.+8      	; 0x29e <App+0x48>
		State = YELLOW;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__data_end>
 29c:	26 c0       	rjmp	.+76     	; 0x2ea <App+0x94>
	}
	else if (strcmp(recieve_from_tx,"START") == 0){
 29e:	64 ec       	ldi	r22, 0xC4	; 196
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	ce 01       	movw	r24, r28
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	0e 94 3b 03 	call	0x676	; 0x676 <strcmp>
 2aa:	89 2b       	or	r24, r25
 2ac:	21 f4       	brne	.+8      	; 0x2b6 <App+0x60>
		State = GREEN;
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__data_end>
 2b4:	1a c0       	rjmp	.+52     	; 0x2ea <App+0x94>
	}
	else if(strcmp(recieve_from_tx,"STOP") == 0){
 2b6:	6a ec       	ldi	r22, 0xCA	; 202
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 3b 03 	call	0x676	; 0x676 <strcmp>
 2c2:	89 2b       	or	r24, r25
 2c4:	19 f4       	brne	.+6      	; 0x2cc <App+0x76>
		State = RED;
 2c6:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__data_end>
 2ca:	0f c0       	rjmp	.+30     	; 0x2ea <App+0x94>
	}
	else if(strcmp(recieve_from_tx,"AT") == 0){
 2cc:	6f ec       	ldi	r22, 0xCF	; 207
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	0e 94 3b 03 	call	0x676	; 0x676 <strcmp>
 2d8:	89 2b       	or	r24, r25
 2da:	21 f4       	brne	.+8      	; 0x2e4 <App+0x8e>
		State = AT;
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__data_end>
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <App+0x94>
	}
	else{
		State = ERROR;
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__data_end>
	}
	
}
 2ea:	2f 96       	adiw	r28, 0x0f	; 15
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <LED_init>:
 *  Author: 20109
 */ 

#include "Led.h"
void LED_init(ST_LED_CONFIG_t config)
{
 300:	86 2f       	mov	r24, r22
 302:	67 2f       	mov	r22, r23
	DIO_setPinDir(config.PORT,config.PIN,OUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDir>
 30a:	08 95       	ret

0000030c <LED_ON>:
}
void LED_ON(ST_LED_CONFIG_t config)
{
 30c:	96 2f       	mov	r25, r22
	if (config.CONN == ACTIVE_HIGH)
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	29 f4       	brne	.+10     	; 0x31c <LED_ON+0x10>
		DIO_setPin(config.PORT,config.PIN);
 312:	67 2f       	mov	r22, r23
 314:	89 2f       	mov	r24, r25
 316:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_setPin>
 31a:	08 95       	ret
	else if (config.CONN == ACTIVE_LOW)
 31c:	81 11       	cpse	r24, r1
 31e:	04 c0       	rjmp	.+8      	; 0x328 <LED_ON+0x1c>
		DIO_clearPin(config.PORT,config.PIN);
 320:	67 2f       	mov	r22, r23
 322:	89 2f       	mov	r24, r25
 324:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_clearPin>
 328:	08 95       	ret

0000032a <LED_OFF>:
}
void LED_OFF(ST_LED_CONFIG_t config)
{
 32a:	96 2f       	mov	r25, r22
	if (config.CONN == ACTIVE_HIGH)
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	29 f4       	brne	.+10     	; 0x33a <LED_OFF+0x10>
		DIO_clearPin(config.PORT,config.PIN);
 330:	67 2f       	mov	r22, r23
 332:	89 2f       	mov	r24, r25
 334:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_clearPin>
 338:	08 95       	ret
	else if (config.CONN == ACTIVE_LOW)
 33a:	81 11       	cpse	r24, r1
 33c:	04 c0       	rjmp	.+8      	; 0x346 <LED_OFF+0x1c>
		DIO_setPin(config.PORT,config.PIN);
 33e:	67 2f       	mov	r22, r23
 340:	89 2f       	mov	r24, r25
 342:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_setPin>
 346:	08 95       	ret

00000348 <main>:
#include "APP/App.h"


int main(void)
{
App_Init();
 348:	0e 94 49 00 	call	0x92	; 0x92 <App_Init>
    while (1) 
    {
		App();
 34c:	0e 94 2b 01 	call	0x256	; 0x256 <App>
 350:	fd cf       	rjmp	.-6      	; 0x34c <main+0x4>

00000352 <DIO_setPinDir>:
* this example set the first 4 bits to 0xF HIGH and the last 4 bits to 0x0 LOW
* void return.
*/
void DIO_writePort(EN_PORTS_t port,uint8_t bin_pins)
{
	REG(port)=bin_pins;
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	69 f4       	brne	.+26     	; 0x370 <DIO_setPinDir+0x1e>
 356:	e8 2f       	mov	r30, r24
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	22 91       	ld	r18, -Z
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_setPinDir+0x14>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_setPinDir+0x10>
 36a:	82 2b       	or	r24, r18
 36c:	80 83       	st	Z, r24
 36e:	08 95       	ret
 370:	41 11       	cpse	r20, r1
 372:	16 c0       	rjmp	.+44     	; 0x3a0 <DIO_setPinDir+0x4e>
 374:	e8 2f       	mov	r30, r24
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	df 01       	movw	r26, r30
 37a:	2e 91       	ld	r18, -X
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_setPinDir+0x34>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_setPinDir+0x30>
 38a:	98 2f       	mov	r25, r24
 38c:	90 95       	com	r25
 38e:	92 23       	and	r25, r18
 390:	9c 93       	st	X, r25
 392:	90 b7       	in	r25, 0x30	; 48
 394:	94 60       	ori	r25, 0x04	; 4
 396:	90 bf       	out	0x30, r25	; 48
 398:	90 81       	ld	r25, Z
 39a:	89 2b       	or	r24, r25
 39c:	80 83       	st	Z, r24
 39e:	08 95       	ret
 3a0:	42 30       	cpi	r20, 0x02	; 2
 3a2:	a9 f4       	brne	.+42     	; 0x3ce <DIO_setPinDir+0x7c>
 3a4:	e8 2f       	mov	r30, r24
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	df 01       	movw	r26, r30
 3aa:	2e 91       	ld	r18, -X
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_setPinDir+0x64>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_setPinDir+0x60>
 3ba:	98 2f       	mov	r25, r24
 3bc:	90 95       	com	r25
 3be:	92 23       	and	r25, r18
 3c0:	9c 93       	st	X, r25
 3c2:	90 b7       	in	r25, 0x30	; 48
 3c4:	9b 7f       	andi	r25, 0xFB	; 251
 3c6:	90 bf       	out	0x30, r25	; 48
 3c8:	90 81       	ld	r25, Z
 3ca:	89 2b       	or	r24, r25
 3cc:	80 83       	st	Z, r24
 3ce:	08 95       	ret

000003d0 <DIO_setPin>:
 3d0:	e8 2f       	mov	r30, r24
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_setPin+0x10>
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_setPin+0xc>
 3e4:	28 2b       	or	r18, r24
 3e6:	20 83       	st	Z, r18
 3e8:	08 95       	ret

000003ea <DIO_clearPin>:
*Function to clear Pin to LOW 
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
*/	
void DIO_clearPin(EN_PORTS_t port,EN_PINS_t pin)
{
	CLRBIT(REG(port),pin);
 3ea:	e8 2f       	mov	r30, r24
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_clearPin+0x10>
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_clearPin+0xc>
 3fe:	20 95       	com	r18
 400:	28 23       	and	r18, r24
 402:	20 83       	st	Z, r18
 404:	08 95       	ret

00000406 <UART_Init>:
*inputs: adrress of function to call every transmission complete
*return: none
*
*/
void UART_SetTXCompleteISR(void (*function)(void)){
	TX_ISR = function;
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	2b 97       	sbiw	r28, 0x0b	; 11
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	e9 82       	std	Y+1, r14	; 0x01
 424:	fa 82       	std	Y+2, r15	; 0x02
 426:	0b 83       	std	Y+3, r16	; 0x03
 428:	1c 83       	std	Y+4, r17	; 0x04
 42a:	2d 83       	std	Y+5, r18	; 0x05
 42c:	3e 83       	std	Y+6, r19	; 0x06
 42e:	4f 83       	std	Y+7, r20	; 0x07
 430:	58 87       	std	Y+8, r21	; 0x08
 432:	69 87       	std	Y+9, r22	; 0x09
 434:	7a 87       	std	Y+10, r23	; 0x0a
 436:	8b 87       	std	Y+11, r24	; 0x0b
 438:	69 81       	ldd	r22, Y+1	; 0x01
 43a:	7a 81       	ldd	r23, Y+2	; 0x02
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	9c 81       	ldd	r25, Y+4	; 0x04
 440:	0d 81       	ldd	r16, Y+5	; 0x05
 442:	1e 81       	ldd	r17, Y+6	; 0x06
 444:	2f 81       	ldd	r18, Y+7	; 0x07
 446:	38 85       	ldd	r19, Y+8	; 0x08
 448:	00 0f       	add	r16, r16
 44a:	11 1f       	adc	r17, r17
 44c:	22 1f       	adc	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	00 0f       	add	r16, r16
 452:	11 1f       	adc	r17, r17
 454:	22 1f       	adc	r18, r18
 456:	33 1f       	adc	r19, r19
 458:	a9 01       	movw	r20, r18
 45a:	98 01       	movw	r18, r16
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	44 1f       	adc	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	44 1f       	adc	r20, r20
 46a:	55 1f       	adc	r21, r21
 46c:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodsi4>
 470:	21 50       	subi	r18, 0x01	; 1
 472:	31 09       	sbc	r19, r1
 474:	8a b1       	in	r24, 0x0a	; 10
 476:	80 61       	ori	r24, 0x10	; 16
 478:	8a b9       	out	0x0a, r24	; 10
 47a:	8a b1       	in	r24, 0x0a	; 10
 47c:	88 60       	ori	r24, 0x08	; 8
 47e:	8a b9       	out	0x0a, r24	; 10
 480:	29 b9       	out	0x09, r18	; 9
 482:	80 b5       	in	r24, 0x20	; 32
 484:	8f 77       	andi	r24, 0x7F	; 127
 486:	80 bd       	out	0x20, r24	; 32
 488:	30 bd       	out	0x20, r19	; 32
 48a:	80 b5       	in	r24, 0x20	; 32
 48c:	80 68       	ori	r24, 0x80	; 128
 48e:	80 bd       	out	0x20, r24	; 32
 490:	80 b5       	in	r24, 0x20	; 32
 492:	8f 7b       	andi	r24, 0xBF	; 191
 494:	80 bd       	out	0x20, r24	; 32
 496:	89 85       	ldd	r24, Y+9	; 0x09
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	39 f4       	brne	.+14     	; 0x4aa <UART_Init+0xa4>
 49c:	80 b5       	in	r24, 0x20	; 32
 49e:	80 62       	ori	r24, 0x20	; 32
 4a0:	80 bd       	out	0x20, r24	; 32
 4a2:	80 b5       	in	r24, 0x20	; 32
 4a4:	8f 7e       	andi	r24, 0xEF	; 239
 4a6:	80 bd       	out	0x20, r24	; 32
 4a8:	11 c0       	rjmp	.+34     	; 0x4cc <UART_Init+0xc6>
 4aa:	81 11       	cpse	r24, r1
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <UART_Init+0xb6>
 4ae:	80 b5       	in	r24, 0x20	; 32
 4b0:	80 62       	ori	r24, 0x20	; 32
 4b2:	80 bd       	out	0x20, r24	; 32
 4b4:	80 b5       	in	r24, 0x20	; 32
 4b6:	80 61       	ori	r24, 0x10	; 16
 4b8:	80 bd       	out	0x20, r24	; 32
 4ba:	08 c0       	rjmp	.+16     	; 0x4cc <UART_Init+0xc6>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	31 f4       	brne	.+12     	; 0x4cc <UART_Init+0xc6>
 4c0:	80 b5       	in	r24, 0x20	; 32
 4c2:	8f 7d       	andi	r24, 0xDF	; 223
 4c4:	80 bd       	out	0x20, r24	; 32
 4c6:	80 b5       	in	r24, 0x20	; 32
 4c8:	8f 7e       	andi	r24, 0xEF	; 239
 4ca:	80 bd       	out	0x20, r24	; 32
 4cc:	80 b5       	in	r24, 0x20	; 32
 4ce:	82 60       	ori	r24, 0x02	; 2
 4d0:	80 bd       	out	0x20, r24	; 32
 4d2:	80 b5       	in	r24, 0x20	; 32
 4d4:	84 60       	ori	r24, 0x04	; 4
 4d6:	80 bd       	out	0x20, r24	; 32
 4d8:	8a 85       	ldd	r24, Y+10	; 0x0a
 4da:	81 11       	cpse	r24, r1
 4dc:	06 c0       	rjmp	.+12     	; 0x4ea <UART_Init+0xe4>
 4de:	8f b7       	in	r24, 0x3f	; 63
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	8f bf       	out	0x3f, r24	; 63
 4e4:	8a b1       	in	r24, 0x0a	; 10
 4e6:	80 68       	ori	r24, 0x80	; 128
 4e8:	8a b9       	out	0x0a, r24	; 10
 4ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 4ec:	81 11       	cpse	r24, r1
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <UART_Init+0xf6>
 4f0:	8f b7       	in	r24, 0x3f	; 63
 4f2:	80 68       	ori	r24, 0x80	; 128
 4f4:	8f bf       	out	0x3f, r24	; 63
 4f6:	8a b1       	in	r24, 0x0a	; 10
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	8a b9       	out	0x0a, r24	; 10
 4fc:	2b 96       	adiw	r28, 0x0b	; 11
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	ff 90       	pop	r15
 512:	ef 90       	pop	r14
 514:	08 95       	ret

00000516 <UART_SendByte>:
 516:	5d 9b       	sbis	0x0b, 5	; 11
 518:	fe cf       	rjmp	.-4      	; 0x516 <UART_SendByte>
 51a:	8c b9       	out	0x0c, r24	; 12
 51c:	8b b1       	in	r24, 0x0b	; 11
 51e:	80 64       	ori	r24, 0x40	; 64
 520:	8b b9       	out	0x0b, r24	; 11
 522:	08 95       	ret

00000524 <UART_ReceiveByte>:
 524:	5f 9b       	sbis	0x0b, 7	; 11
 526:	fe cf       	rjmp	.-4      	; 0x524 <UART_ReceiveByte>
 528:	8c b1       	in	r24, 0x0c	; 12
 52a:	08 95       	ret

0000052c <UART_SendString>:
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	8c 01       	movw	r16, r24
 534:	c0 e0       	ldi	r28, 0x00	; 0
 536:	03 c0       	rjmp	.+6      	; 0x53e <UART_SendString+0x12>
 538:	0e 94 8b 02 	call	0x516	; 0x516 <UART_SendByte>
 53c:	cf 5f       	subi	r28, 0xFF	; 255
 53e:	f8 01       	movw	r30, r16
 540:	ec 0f       	add	r30, r28
 542:	f1 1d       	adc	r31, r1
 544:	80 81       	ld	r24, Z
 546:	81 11       	cpse	r24, r1
 548:	f7 cf       	rjmp	.-18     	; 0x538 <UART_SendString+0xc>
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <UART_ReceiveString>:
 552:	ef 92       	push	r14
 554:	ff 92       	push	r15
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	7c 01       	movw	r14, r24
 55e:	c0 e0       	ldi	r28, 0x00	; 0
 560:	0c c0       	rjmp	.+24     	; 0x57a <UART_ReceiveString+0x28>
 562:	87 01       	movw	r16, r14
 564:	0c 0f       	add	r16, r28
 566:	11 1d       	adc	r17, r1
 568:	0e 94 92 02 	call	0x524	; 0x524 <UART_ReceiveByte>
 56c:	f8 01       	movw	r30, r16
 56e:	80 83       	st	Z, r24
 570:	8d 30       	cpi	r24, 0x0D	; 13
 572:	11 f4       	brne	.+4      	; 0x578 <UART_ReceiveString+0x26>
 574:	10 82       	st	Z, r1
 576:	03 c0       	rjmp	.+6      	; 0x57e <UART_ReceiveString+0x2c>
 578:	cf 5f       	subi	r28, 0xFF	; 255
 57a:	cf 30       	cpi	r28, 0x0F	; 15
 57c:	90 f3       	brcs	.-28     	; 0x562 <UART_ReceiveString+0x10>
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	08 95       	ret

0000058a <__vector_13>:
}


/*ISRs*/
void __vector_13(){
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	2f 93       	push	r18
 596:	3f 93       	push	r19
 598:	4f 93       	push	r20
 59a:	5f 93       	push	r21
 59c:	6f 93       	push	r22
 59e:	7f 93       	push	r23
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
 5a4:	af 93       	push	r26
 5a6:	bf 93       	push	r27
 5a8:	ef 93       	push	r30
 5aa:	ff 93       	push	r31
	RX_ISR();
 5ac:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <RX_ISR>
 5b0:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <RX_ISR+0x1>
 5b4:	09 95       	icall
	SETBIT(UCSRA,7);
 5b6:	8b b1       	in	r24, 0x0b	; 11
 5b8:	80 68       	ori	r24, 0x80	; 128
 5ba:	8b b9       	out	0x0b, r24	; 11
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__vector_15>:

void __vector_15(){
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
	TX_ISR();
 600:	e0 91 d5 00 	lds	r30, 0x00D5	; 0x8000d5 <TX_ISR>
 604:	f0 91 d6 00 	lds	r31, 0x00D6	; 0x8000d6 <TX_ISR+0x1>
 608:	09 95       	icall
	SETBIT(UCSRA,6);
 60a:	8b b1       	in	r24, 0x0b	; 11
 60c:	80 64       	ori	r24, 0x40	; 64
 60e:	8b b9       	out	0x0b, r24	; 11

}
 610:	ff 91       	pop	r31
 612:	ef 91       	pop	r30
 614:	bf 91       	pop	r27
 616:	af 91       	pop	r26
 618:	9f 91       	pop	r25
 61a:	8f 91       	pop	r24
 61c:	7f 91       	pop	r23
 61e:	6f 91       	pop	r22
 620:	5f 91       	pop	r21
 622:	4f 91       	pop	r20
 624:	3f 91       	pop	r19
 626:	2f 91       	pop	r18
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <__udivmodsi4>:
 632:	a1 e2       	ldi	r26, 0x21	; 33
 634:	1a 2e       	mov	r1, r26
 636:	aa 1b       	sub	r26, r26
 638:	bb 1b       	sub	r27, r27
 63a:	fd 01       	movw	r30, r26
 63c:	0d c0       	rjmp	.+26     	; 0x658 <__udivmodsi4_ep>

0000063e <__udivmodsi4_loop>:
 63e:	aa 1f       	adc	r26, r26
 640:	bb 1f       	adc	r27, r27
 642:	ee 1f       	adc	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	a2 17       	cp	r26, r18
 648:	b3 07       	cpc	r27, r19
 64a:	e4 07       	cpc	r30, r20
 64c:	f5 07       	cpc	r31, r21
 64e:	20 f0       	brcs	.+8      	; 0x658 <__udivmodsi4_ep>
 650:	a2 1b       	sub	r26, r18
 652:	b3 0b       	sbc	r27, r19
 654:	e4 0b       	sbc	r30, r20
 656:	f5 0b       	sbc	r31, r21

00000658 <__udivmodsi4_ep>:
 658:	66 1f       	adc	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	1a 94       	dec	r1
 662:	69 f7       	brne	.-38     	; 0x63e <__udivmodsi4_loop>
 664:	60 95       	com	r22
 666:	70 95       	com	r23
 668:	80 95       	com	r24
 66a:	90 95       	com	r25
 66c:	9b 01       	movw	r18, r22
 66e:	ac 01       	movw	r20, r24
 670:	bd 01       	movw	r22, r26
 672:	cf 01       	movw	r24, r30
 674:	08 95       	ret

00000676 <strcmp>:
 676:	fb 01       	movw	r30, r22
 678:	dc 01       	movw	r26, r24
 67a:	8d 91       	ld	r24, X+
 67c:	01 90       	ld	r0, Z+
 67e:	80 19       	sub	r24, r0
 680:	01 10       	cpse	r0, r1
 682:	d9 f3       	breq	.-10     	; 0x67a <strcmp+0x4>
 684:	99 0b       	sbc	r25, r25
 686:	08 95       	ret

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>
