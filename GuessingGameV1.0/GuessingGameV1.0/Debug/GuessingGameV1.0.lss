
GuessingGameV1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000153a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  0000153a  000015ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000da  008000da  00001648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021c5  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8b  00000000  00000000  00003a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ef  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  000057f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000955  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014fc  00000000  00000000  00006719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00007c15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
      8a:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CheckForPassedTime>:
		arr[2]= '\0';
	}
}

void CheckForPassedTime(){
	if (button_pressed == 1)
      92:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <button_pressed>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	29 f4       	brne	.+10     	; 0xa4 <CheckForPassedTime+0x12>
		Time_Passed++;
      9a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <Time_Passed>
      9e:	8f 5f       	subi	r24, 0xFF	; 255
      a0:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <Time_Passed>
	
	counter++;
      a4:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <counter>
      a8:	8f 5f       	subi	r24, 0xFF	; 255
      aa:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <counter>
      ae:	08 95       	ret

000000b0 <printWinMsg>:
	Lcd_SendStringXY (1,13, max_number);

}
void printWinMsg()
{
	Lcd_SendCommand(CLR_DISPLAY);
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
	Lcd_SendStringXY (0,1, "YOU WIN!!!");
      b6:	44 e8       	ldi	r20, 0x84	; 132
      b8:	50 e0       	ldi	r21, 0x00	; 0
      ba:	61 e0       	ldi	r22, 0x01	; 1
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
      c2:	08 95       	ret

000000c4 <convert_2DigitInt_to_str>:
			counter = 0;
		}

}

void convert_2DigitInt_to_str(unsigned char number,char* arr){
      c4:	fb 01       	movw	r30, r22
	arr[0] = (number / 10);
      c6:	9d ec       	ldi	r25, 0xCD	; 205
      c8:	89 9f       	mul	r24, r25
      ca:	91 2d       	mov	r25, r1
      cc:	11 24       	eor	r1, r1
      ce:	96 95       	lsr	r25
      d0:	96 95       	lsr	r25
      d2:	96 95       	lsr	r25
      d4:	90 83       	st	Z, r25
	
	if (arr[0] == 0){
      d6:	91 11       	cpse	r25, r1
      d8:	04 c0       	rjmp	.+8      	; 0xe2 <convert_2DigitInt_to_str+0x1e>
		arr[0] = number + '0';
      da:	80 5d       	subi	r24, 0xD0	; 208
      dc:	80 83       	st	Z, r24
		arr[1] = '\0';
      de:	11 82       	std	Z+1, r1	; 0x01
		return;
      e0:	08 95       	ret
	}
	else{
		arr[1]= (number - (arr[0]*10));
      e2:	39 2f       	mov	r19, r25
      e4:	33 0f       	add	r19, r19
      e6:	23 2f       	mov	r18, r19
      e8:	22 0f       	add	r18, r18
      ea:	22 0f       	add	r18, r18
      ec:	23 0f       	add	r18, r19
      ee:	82 1b       	sub	r24, r18
		arr[0]+= '0';
      f0:	90 5d       	subi	r25, 0xD0	; 208
      f2:	90 83       	st	Z, r25
		arr[1]+='0';
      f4:	80 5d       	subi	r24, 0xD0	; 208
      f6:	81 83       	std	Z+1, r24	; 0x01
		arr[2]= '\0';
      f8:	12 82       	std	Z+2, r1	; 0x02
      fa:	08 95       	ret

000000fc <printLayoutMsg>:
uint8_t user_number;
uint8_t rand_number;
uint8_t button_pressed;
uint8_t counter;

void printLayoutMsg(void){
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	00 d0       	rcall	.+0      	; 0x102 <printLayoutMsg+0x6>
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
	sint8_t str_number[2];
	Lcd_ClrScreen();
     106:	0e 94 9b 02 	call	0x536	; 0x536 <Lcd_ClrScreen>
	Lcd_SendString("Guess the number ");
     10a:	8f e8       	ldi	r24, 0x8F	; 143
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 b0 02 	call	0x560	; 0x560 <Lcd_SendString>
	convert_2DigitInt_to_str(user_number,str_number);
     112:	be 01       	movw	r22, r28
     114:	6f 5f       	subi	r22, 0xFF	; 255
     116:	7f 4f       	sbci	r23, 0xFF	; 255
     118:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <user_number>
     11c:	0e 94 62 00 	call	0xc4	; 0xc4 <convert_2DigitInt_to_str>
	Lcd_SendStringXY (1,0, str_number);
     120:	ae 01       	movw	r20, r28
     122:	4f 5f       	subi	r20, 0xFF	; 255
     124:	5f 4f       	sbci	r21, 0xFF	; 255
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
}
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <app_init>:
	convert_2DigitInt_to_str(user_number,str_number);
	Lcd_SendStringXY (1,0, str_number);
}

void app_init()
{	
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
	Lcd_init();
     140:	0e 94 46 02 	call	0x48c	; 0x48c <Lcd_init>
	Timer_init(Timer1Config);
     144:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     148:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     14c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     150:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     154:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     158:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     15c:	0e 94 36 04 	call	0x86c	; 0x86c <Timer_init>
	Button_init(BUTTON);
     160:	42 e0       	ldi	r20, 0x02	; 2
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	8b e3       	ldi	r24, 0x3B	; 59
     166:	0e 94 b3 01 	call	0x366	; 0x366 <Button_init>
	Timer_Schedule_Fun(DELAY_TIME,Timer1Config,CheckForPassedTime);
     16a:	0f 2e       	mov	r0, r31
     16c:	f9 e4       	ldi	r31, 0x49	; 73
     16e:	ef 2e       	mov	r14, r31
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	ff 2e       	mov	r15, r31
     174:	f0 2d       	mov	r31, r0
     176:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     17a:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     17e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     182:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     186:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     18a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e4       	ldi	r25, 0x40	; 64
     196:	0e 94 30 06 	call	0xc60	; 0xc60 <Timer_Schedule_Fun>
	
	counter = 0;
     19a:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <counter>
	user_number=0;
     19e:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <user_number>
	button_pressed=0;
     1a2:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <button_pressed>
	Time_Passed = 0;
     1a6:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <Time_Passed>
	rand_number = 0;
     1aa:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <rand_number>
	
	printLayoutMsg();
     1ae:	0e 94 7e 00 	call	0xfc	; 0xfc <printLayoutMsg>
	
}
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	08 95       	ret

000001bc <printGreaterThanMin>:
	Lcd_SendString("Guess the number ");
	convert_2DigitInt_to_str(user_number,str_number);
	Lcd_SendStringXY (1,0, str_number);
}

void printGreaterThanMin(void){
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <printGreaterThanMin+0x6>
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
	sint8_t min_number[2];
	Lcd_ClrScreen();
     1c6:	0e 94 9b 02 	call	0x536	; 0x536 <Lcd_ClrScreen>
	Lcd_SendStringXY(0,0,"Enter number");
     1ca:	41 ea       	ldi	r20, 0xA1	; 161
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
	Lcd_SendStringXY(1,0,"Greater than");		
     1d6:	4e ea       	ldi	r20, 0xAE	; 174
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
	convert_2DigitInt_to_str(MIN,min_number);
     1e2:	be 01       	movw	r22, r28
     1e4:	6f 5f       	subi	r22, 0xFF	; 255
     1e6:	7f 4f       	sbci	r23, 0xFF	; 255
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 62 00 	call	0xc4	; 0xc4 <convert_2DigitInt_to_str>
	Lcd_SendStringXY (1,13, min_number);
     1ee:	ae 01       	movw	r20, r28
     1f0:	4f 5f       	subi	r20, 0xFF	; 255
     1f2:	5f 4f       	sbci	r21, 0xFF	; 255
     1f4:	6d e0       	ldi	r22, 0x0D	; 13
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>

}
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <printLessThanMax>:
void printLessThanMax(void){
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <printLessThanMax+0x6>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
	sint8_t max_number[2];
	Lcd_ClrScreen();
     210:	0e 94 9b 02 	call	0x536	; 0x536 <Lcd_ClrScreen>
	Lcd_SendStringXY(0,0,"Enter number");
     214:	41 ea       	ldi	r20, 0xA1	; 161
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
	Lcd_SendStringXY(1,0,"less than");
     220:	4b eb       	ldi	r20, 0xBB	; 187
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
	convert_2DigitInt_to_str(MAX,max_number);
     22c:	be 01       	movw	r22, r28
     22e:	6f 5f       	subi	r22, 0xFF	; 255
     230:	7f 4f       	sbci	r23, 0xFF	; 255
     232:	8f e0       	ldi	r24, 0x0F	; 15
     234:	0e 94 62 00 	call	0xc4	; 0xc4 <convert_2DigitInt_to_str>
	Lcd_SendStringXY (1,13, max_number);
     238:	ae 01       	movw	r20, r28
     23a:	4f 5f       	subi	r20, 0xFF	; 255
     23c:	5f 4f       	sbci	r21, 0xFF	; 255
     23e:	6d e0       	ldi	r22, 0x0D	; 13
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>

}
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <printLoseMsg>:
{
	Lcd_SendCommand(CLR_DISPLAY);
	Lcd_SendStringXY (0,1, "YOU WIN!!!");
}
void printLoseMsg()
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	00 d0       	rcall	.+0      	; 0x256 <printLoseMsg+0x6>
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
	sint8_t str_rand_number[2];
	Lcd_SendCommand(CLR_DISPLAY);
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
	Lcd_SendStringXY (0,1, "YOU LOSE");
     260:	45 ec       	ldi	r20, 0xC5	; 197
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
	Lcd_SendStringXY (1,0, "Number is ");
     26c:	4e ec       	ldi	r20, 0xCE	; 206
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>

	convert_2DigitInt_to_str(rand_number,str_rand_number);
     278:	be 01       	movw	r22, r28
     27a:	6f 5f       	subi	r22, 0xFF	; 255
     27c:	7f 4f       	sbci	r23, 0xFF	; 255
     27e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <rand_number>
     282:	0e 94 62 00 	call	0xc4	; 0xc4 <convert_2DigitInt_to_str>
	Lcd_SendStringXY (1,12, str_rand_number);
     286:	ae 01       	movw	r20, r28
     288:	4f 5f       	subi	r20, 0xFF	; 255
     28a:	5f 4f       	sbci	r21, 0xFF	; 255
     28c:	6c e0       	ldi	r22, 0x0C	; 12
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
}
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <printStrFromInt>:
void printStrFromInt(uint8_t number)
{	
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <printStrFromInt+0x6>
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
	sint8_t str_number[2];
	convert_2DigitInt_to_str(user_number,str_number);
     2a8:	be 01       	movw	r22, r28
     2aa:	6f 5f       	subi	r22, 0xFF	; 255
     2ac:	7f 4f       	sbci	r23, 0xFF	; 255
     2ae:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <user_number>
     2b2:	0e 94 62 00 	call	0xc4	; 0xc4 <convert_2DigitInt_to_str>
	Lcd_SendStringXY (1,0, str_number);
     2b6:	ae 01       	movw	r20, r28
     2b8:	4f 5f       	subi	r20, 0xFF	; 255
     2ba:	5f 4f       	sbci	r21, 0xFF	; 255
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 c3 02 	call	0x586	; 0x586 <Lcd_SendStringXY>
}
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <app>:
}
void app()
{

		//rand_number = (rand()%14) +1;
		rand_number = 5;
     2ce:	85 e0       	ldi	r24, 0x05	; 5
     2d0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <rand_number>
		
		if (counter > 1 && button_pressed == 0){
     2d4:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <counter>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	40 f0       	brcs	.+16     	; 0x2ec <app+0x1e>
     2dc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <button_pressed>
     2e0:	81 11       	cpse	r24, r1
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <app+0x1e>
			printGreaterThanMin();
     2e4:	0e 94 de 00 	call	0x1bc	; 0x1bc <printGreaterThanMin>
			counter = 0;
     2e8:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <counter>
		}
		if(Button_read_one_press(BUTTON) == HIGH){
     2ec:	42 e0       	ldi	r20, 0x02	; 2
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	8b e3       	ldi	r24, 0x3B	; 59
     2f2:	0e 94 c9 01 	call	0x392	; 0x392 <Button_read_one_press>
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	f1 f4       	brne	.+60     	; 0x336 <app+0x68>
			
			if (button_pressed == 0){
     2fa:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <button_pressed>
     2fe:	81 11       	cpse	r24, r1
     300:	05 c0       	rjmp	.+10     	; 0x30c <app+0x3e>
				button_pressed = 1;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <button_pressed>
				printLayoutMsg();
     308:	0e 94 7e 00 	call	0xfc	; 0xfc <printLayoutMsg>
			}
			
			Time_Passed = 0;
     30c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <Time_Passed>
			user_number ++;
     310:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <user_number>
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <user_number>
			
			if(user_number > 15)
     31a:	80 31       	cpi	r24, 0x10	; 16
     31c:	38 f0       	brcs	.+14     	; 0x32c <app+0x5e>
			{
				printLessThanMax();
     31e:	0e 94 03 01 	call	0x206	; 0x206 <printLessThanMax>
				user_number = 0;
     322:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <user_number>
				button_pressed = 0;
     326:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <button_pressed>
				return;
     32a:	08 95       	ret
			}
			
			counter = 0;
     32c:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <counter>
			printStrFromInt(user_number);
     330:	0e 94 4f 01 	call	0x29e	; 0x29e <printStrFromInt>
     334:	08 95       	ret

		}
		else if(Time_Passed > 1){
     336:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <Time_Passed>
     33a:	82 30       	cpi	r24, 0x02	; 2
     33c:	98 f0       	brcs	.+38     	; 0x364 <app+0x96>
			if (rand_number == user_number){
     33e:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <rand_number>
     342:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <user_number>
     346:	98 13       	cpse	r25, r24
     348:	03 c0       	rjmp	.+6      	; 0x350 <app+0x82>
				printWinMsg();
     34a:	0e 94 58 00 	call	0xb0	; 0xb0 <printWinMsg>
     34e:	02 c0       	rjmp	.+4      	; 0x354 <app+0x86>
			}
			else
			{
				printLoseMsg();
     350:	0e 94 28 01 	call	0x250	; 0x250 <printLoseMsg>
			}
			button_pressed = 0;
     354:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <button_pressed>
			user_number =0;
     358:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <user_number>
			Time_Passed =0;
     35c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <Time_Passed>
			counter = 0;
     360:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <counter>
     364:	08 95       	ret

00000366 <Button_init>:
 *	void return.
 *	Expected Output: PIN of the button is set as input.
 */
void Button_init(EN_PORTS_t port,EN_PINS_t pin,EN_CONN_t conn)
{
	if (conn == INTERNAL_PULLUP)
     366:	42 30       	cpi	r20, 0x02	; 2
     368:	19 f4       	brne	.+6      	; 0x370 <Button_init+0xa>
		DIO_setPinDir(port ,pin ,INTERNAL_PULLUP);
     36a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
     36e:	08 95       	ret
	else 
		DIO_setPinDir(port ,pin ,IN);
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
     376:	08 95       	ret

00000378 <Button_read>:
 *	=================PS:: FUNCTION MUST BE CALLED PERIDOCALLY TO AVOID DEBOUNCING EFFECTS======================
 * change DEBOUNCING TIME macro in Button.h according to your app.
 */
uint8_t Button_read(EN_PORTS_t port,EN_PINS_t pin,EN_CONN_t conn)
{
	if (conn == PULLDOWN_RES){
     378:	41 30       	cpi	r20, 0x01	; 1
     37a:	21 f4       	brne	.+8      	; 0x384 <Button_read+0xc>
		return DIO_getPin(port,pin);
     37c:	0e 94 4a 03 	call	0x694	; 0x694 <DIO_getPin>
     380:	98 2f       	mov	r25, r24
     382:	05 c0       	rjmp	.+10     	; 0x38e <Button_read+0x16>
	}
	else{
		return !DIO_getPin(port,pin);
     384:	0e 94 4a 03 	call	0x694	; 0x694 <DIO_getPin>
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	81 11       	cpse	r24, r1
     38c:	90 e0       	ldi	r25, 0x00	; 0
	}

}
     38e:	89 2f       	mov	r24, r25
     390:	08 95       	ret

00000392 <Button_read_one_press>:
{
	uint8_t current_value =0;
	static uint8_t last_value = 0;
	uint8_t return_value = 0;
	
	current_value = Button_read(port,pin,conn);
     392:	0e 94 bc 01 	call	0x378	; 0x378 <Button_read>
	
	if (current_value!=last_value){
     396:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <__data_end>
     39a:	89 13       	cpse	r24, r25
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <Button_read_one_press+0x10>
		return_value = current_value;					/*return pressed value */
	}
	else return_value = 2;								/*return any other value*/
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <Button_read_one_press+0x12>
	uint8_t return_value = 0;
	
	current_value = Button_read(port,pin,conn);
	
	if (current_value!=last_value){
		return_value = current_value;					/*return pressed value */
     3a2:	98 2f       	mov	r25, r24
	}
	else return_value = 2;								/*return any other value*/
	
	last_value = current_value;							/*update variables*/
     3a4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__data_end>
	
	return return_value;
}
     3a8:	89 2f       	mov	r24, r25
     3aa:	08 95       	ret

000003ac <WriteLowNibble>:
Description: Function to write low nibble of number to the connected high pins for 4bit mode
*Input : uint8_t the number to write
*return: None
*/

 void WriteLowNibble( uint8_t n ){
     3ac:	cf 93       	push	r28
     3ae:	c8 2f       	mov	r28, r24
	DIO_write(LCD_D4 , ((n) & (0x01)) );
     3b0:	48 2f       	mov	r20, r24
     3b2:	41 70       	andi	r20, 0x01	; 1
     3b4:	64 e0       	ldi	r22, 0x04	; 4
     3b6:	85 e3       	ldi	r24, 0x35	; 53
     3b8:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
	DIO_write(LCD_D5 , ((n >> 1) & (0x01)) );
     3bc:	c1 fb       	bst	r28, 1
     3be:	44 27       	eor	r20, r20
     3c0:	40 f9       	bld	r20, 0
     3c2:	65 e0       	ldi	r22, 0x05	; 5
     3c4:	85 e3       	ldi	r24, 0x35	; 53
     3c6:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
	DIO_write(LCD_D6 , ((n >> 2) & (0x01)) );
     3ca:	c2 fb       	bst	r28, 2
     3cc:	44 27       	eor	r20, r20
     3ce:	40 f9       	bld	r20, 0
     3d0:	66 e0       	ldi	r22, 0x06	; 6
     3d2:	85 e3       	ldi	r24, 0x35	; 53
     3d4:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
	DIO_write(LCD_D7 , ((n >> 3) & (0x01)) );
     3d8:	c3 fb       	bst	r28, 3
     3da:	44 27       	eor	r20, r20
     3dc:	40 f9       	bld	r20, 0
     3de:	67 e0       	ldi	r22, 0x07	; 7
     3e0:	85 e3       	ldi	r24, 0x35	; 53
     3e2:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
}
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <WriteHighNibble>:
Description: Function to write high nibble of number to the connected high pins for 4bit mode
*Input : uint8_t the number to write
*return: None
*/

 void WriteHighNibble( uint8_t n ){
     3ea:	cf 93       	push	r28
     3ec:	c8 2f       	mov	r28, r24
	DIO_write(LCD_D4 , ((n>>4) & (0x01)) );
     3ee:	84 fb       	bst	r24, 4
     3f0:	44 27       	eor	r20, r20
     3f2:	40 f9       	bld	r20, 0
     3f4:	64 e0       	ldi	r22, 0x04	; 4
     3f6:	85 e3       	ldi	r24, 0x35	; 53
     3f8:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
	DIO_write(LCD_D5 , ((n >> 5) & (0x01)) );
     3fc:	c5 fb       	bst	r28, 5
     3fe:	44 27       	eor	r20, r20
     400:	40 f9       	bld	r20, 0
     402:	65 e0       	ldi	r22, 0x05	; 5
     404:	85 e3       	ldi	r24, 0x35	; 53
     406:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
	DIO_write(LCD_D6 , ((n >> 6) & (0x01)) );
     40a:	c6 fb       	bst	r28, 6
     40c:	44 27       	eor	r20, r20
     40e:	40 f9       	bld	r20, 0
     410:	66 e0       	ldi	r22, 0x06	; 6
     412:	85 e3       	ldi	r24, 0x35	; 53
     414:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
	DIO_write(LCD_D7 , ((n >> 7) & (0x01)) );
     418:	4c 2f       	mov	r20, r28
     41a:	44 1f       	adc	r20, r20
     41c:	44 27       	eor	r20, r20
     41e:	44 1f       	adc	r20, r20
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	85 e3       	ldi	r24, 0x35	; 53
     424:	0e 94 12 03 	call	0x624	; 0x624 <DIO_write>
}
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <ToggleEN>:
/*
Description: Function to make a falling edge on the enable pin with delay 1us
*Input : None.
*return: None.
*/
void ToggleEN(void){
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
	DIO_setPin(LCD_EN);
     430:	63 e0       	ldi	r22, 0x03	; 3
     432:	85 e3       	ldi	r24, 0x35	; 53
     434:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_setPin>
	Timer_Delay(0.000001,TimerConfig);
     438:	00 91 66 00 	lds	r16, 0x0066	; 0x800066 <TimerConfig>
     43c:	10 91 67 00 	lds	r17, 0x0067	; 0x800067 <TimerConfig+0x1>
     440:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <TimerConfig+0x2>
     444:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <TimerConfig+0x3>
     448:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <TimerConfig+0x4>
     44c:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <TimerConfig+0x5>
     450:	6d eb       	ldi	r22, 0xBD	; 189
     452:	77 e3       	ldi	r23, 0x37	; 55
     454:	86 e8       	ldi	r24, 0x86	; 134
     456:	95 e3       	ldi	r25, 0x35	; 53
     458:	0e 94 75 04 	call	0x8ea	; 0x8ea <Timer_Delay>
	DIO_clearPin(LCD_EN);
     45c:	63 e0       	ldi	r22, 0x03	; 3
     45e:	85 e3       	ldi	r24, 0x35	; 53
     460:	0e 94 3c 03 	call	0x678	; 0x678 <DIO_clearPin>
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	08 95       	ret

0000046a <Lcd_SendCommand>:
*Output: NONE
*return void
*
*/
void Lcd_SendCommand( uint8_t cmnd )
{
     46a:	cf 93       	push	r28
     46c:	c8 2f       	mov	r28, r24
	#if LCD_MODE == FOUR_BIT_MODE
		WriteHighNibble(cmnd);
     46e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <WriteHighNibble>

		DIO_clearPin(LCD_RS);						/*Write to control register*/
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	85 e3       	ldi	r24, 0x35	; 53
     476:	0e 94 3c 03 	call	0x678	; 0x678 <DIO_clearPin>
		ToggleEN();
     47a:	0e 94 16 02 	call	0x42c	; 0x42c <ToggleEN>

		WriteLowNibble(cmnd);
     47e:	8c 2f       	mov	r24, r28
     480:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WriteLowNibble>
		ToggleEN();
     484:	0e 94 16 02 	call	0x42c	; 0x42c <ToggleEN>
	#endif
}
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <Lcd_init>:
*Void input and return.
*
*/

void Lcd_init(){
	Timer_init(TimerConfig);
     48c:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <TimerConfig>
     490:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <TimerConfig+0x1>
     494:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <TimerConfig+0x2>
     498:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <TimerConfig+0x3>
     49c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <TimerConfig+0x4>
     4a0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <TimerConfig+0x5>
     4a4:	0e 94 36 04 	call	0x86c	; 0x86c <Timer_init>
	#if LCD_MODE == FOUR_BIT_MODE						/*SET HIGH PINS DIRECTIONS OUT AND SEND 4BIT COMMANDS*/
		DIO_setPinDir(LCD_D4,OUT);
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	64 e0       	ldi	r22, 0x04	; 4
     4ac:	85 e3       	ldi	r24, 0x35	; 53
     4ae:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
		DIO_setPinDir(LCD_D5,OUT);
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	65 e0       	ldi	r22, 0x05	; 5
     4b6:	85 e3       	ldi	r24, 0x35	; 53
     4b8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
		DIO_setPinDir(LCD_D6,OUT);
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	66 e0       	ldi	r22, 0x06	; 6
     4c0:	85 e3       	ldi	r24, 0x35	; 53
     4c2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
		DIO_setPinDir(LCD_D7,OUT);
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	67 e0       	ldi	r22, 0x07	; 7
     4ca:	85 e3       	ldi	r24, 0x35	; 53
     4cc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
	
		DIO_setPinDir(LCD_RS,OUT);						/*CONTROL PINS*/
     4d0:	41 e0       	ldi	r20, 0x01	; 1
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	85 e3       	ldi	r24, 0x35	; 53
     4d6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
		DIO_setPinDir(LCD_EN,OUT);
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	63 e0       	ldi	r22, 0x03	; 3
     4de:	85 e3       	ldi	r24, 0x35	; 53
     4e0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
		DIO_setPinDir(LCD_RW,OUT);
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	62 e0       	ldi	r22, 0x02	; 2
     4e8:	85 e3       	ldi	r24, 0x35	; 53
     4ea:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_setPinDir>
		
		Lcd_SendCommand(LCD_4BIT_MODE);					/*4BIT COMMANDS*/
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
		Lcd_SendCommand(FOUR_BIT_TWO_LINES_5x7);	
     4f4:	88 e2       	ldi	r24, 0x28	; 40
     4f6:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
		Lcd_SendCommand(LCD_8BIT_MODE);						/*8BIT COMMANDS*/
		Lcd_SendCommand(EIGHT_BIT_TWO_LINES_5x7);			

	#endif

	Lcd_SendCommand(DISPLAY_ON_CURSOR_OFF);              /* Display on cursor off*/
     4fa:	8c e0       	ldi	r24, 0x0C	; 12
     4fc:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
	Lcd_SendCommand(CURSOR_RIGHT);						 /* shift cursor to right*/
     500:	86 e0       	ldi	r24, 0x06	; 6
     502:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
	Lcd_SendCommand(CLR_DISPLAY);						 /* Clear screen*/	
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
     50c:	08 95       	ret

0000050e <Lcd_GoToXY>:
*		column number must be less than maximum character numbers in one row
*void return.
*/
void Lcd_GoToXY(uint8_t row , uint8_t col){
	
	if (col < MAX_CHARS && row <MAX_ROWS){
     50e:	60 31       	cpi	r22, 0x10	; 16
     510:	88 f4       	brcc	.+34     	; 0x534 <Lcd_GoToXY+0x26>
     512:	82 30       	cpi	r24, 0x02	; 2
     514:	78 f4       	brcc	.+30     	; 0x534 <Lcd_GoToXY+0x26>
		if (row == 0){									/*First row , row number 0*/
     516:	81 11       	cpse	r24, r1
     518:	06 c0       	rjmp	.+12     	; 0x526 <Lcd_GoToXY+0x18>
			Lcd_SendCommand((col & 0x0F)|CURSOR_BEGIN_FIRST_LINE);
     51a:	86 2f       	mov	r24, r22
     51c:	8f 70       	andi	r24, 0x0F	; 15
     51e:	80 68       	ori	r24, 0x80	; 128
     520:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
     524:	08 95       	ret
		}
		else if(row == 1){								/*Second row , row number 1*/
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	29 f4       	brne	.+10     	; 0x534 <Lcd_GoToXY+0x26>
			Lcd_SendCommand((col & 0x0F)|CURSOR_BEGIN_SECOND_LINE);
     52a:	86 2f       	mov	r24, r22
     52c:	8f 70       	andi	r24, 0x0F	; 15
     52e:	80 6c       	ori	r24, 0xC0	; 192
     530:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
     534:	08 95       	ret

00000536 <Lcd_ClrScreen>:
* Function to clean the LCD screen.
* Inputs: NONE
* void return.
**/
void Lcd_ClrScreen(){
	Lcd_SendCommand(CLR_DISPLAY);
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 35 02 	call	0x46a	; 0x46a <Lcd_SendCommand>
     53c:	08 95       	ret

0000053e <Lcd_SendChar>:
*Input: uint8_t ascii code of the character 
*Expected Output: the character is printed on the screen.
*void return.
*/
void Lcd_SendChar( uint8_t data )
{
     53e:	cf 93       	push	r28
     540:	c8 2f       	mov	r28, r24
	#if LCD_MODE == FOUR_BIT_MODE
		WriteHighNibble(data);					
     542:	0e 94 f5 01 	call	0x3ea	; 0x3ea <WriteHighNibble>
	
		DIO_setPin(LCD_RS);						/*Write to Data register*/
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	85 e3       	ldi	r24, 0x35	; 53
     54a:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_setPin>
		ToggleEN();
     54e:	0e 94 16 02 	call	0x42c	; 0x42c <ToggleEN>
	
		WriteLowNibble(data);
     552:	8c 2f       	mov	r24, r28
     554:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WriteLowNibble>
		ToggleEN();
     558:	0e 94 16 02 	call	0x42c	; 0x42c <ToggleEN>
	#endif
}
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <Lcd_SendString>:
*Inputs: pointer to a character points to the first character of the string
*Void return.
*EXAMPLE: Lcd_SendString("Hello World");
*/
void Lcd_SendString (sint8_t *str)		/* Send string to LCD function */
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	8c 01       	movw	r16, r24
	uint8_t chars_iterator;
	for(chars_iterator=0;str[chars_iterator]!= '\0';chars_iterator++){		/* Send each char of string till the end of string */
     568:	c0 e0       	ldi	r28, 0x00	; 0
     56a:	03 c0       	rjmp	.+6      	; 0x572 <Lcd_SendString+0x12>
		Lcd_SendChar (str[chars_iterator]);
     56c:	0e 94 9f 02 	call	0x53e	; 0x53e <Lcd_SendChar>
*EXAMPLE: Lcd_SendString("Hello World");
*/
void Lcd_SendString (sint8_t *str)		/* Send string to LCD function */
{
	uint8_t chars_iterator;
	for(chars_iterator=0;str[chars_iterator]!= '\0';chars_iterator++){		/* Send each char of string till the end of string */
     570:	cf 5f       	subi	r28, 0xFF	; 255
     572:	f8 01       	movw	r30, r16
     574:	ec 0f       	add	r30, r28
     576:	f1 1d       	adc	r31, r1
     578:	80 81       	ld	r24, Z
     57a:	81 11       	cpse	r24, r1
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <Lcd_SendString+0xc>
		Lcd_SendChar (str[chars_iterator]);
	}
}
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	08 95       	ret

00000586 <Lcd_SendStringXY>:
*		row number must be 0 or 1 if using 16*2 LCD
*		column number must be less than maximum character numbers in one row
*void return.
*/
void Lcd_SendStringXY (uint8_t row, uint8_t col, sint8_t *str)
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ea 01       	movw	r28, r20
		Lcd_GoToXY(row,col);
     58c:	0e 94 87 02 	call	0x50e	; 0x50e <Lcd_GoToXY>
		Lcd_SendString(str);
     590:	ce 01       	movw	r24, r28
     592:	0e 94 b0 02 	call	0x560	; 0x560 <Lcd_SendString>
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <main>:



int main()
{
	app_init();
     59c:	0e 94 9c 00 	call	0x138	; 0x138 <app_init>
	while(1)
	{
		app();
     5a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <app>
     5a4:	fd cf       	rjmp	.-6      	; 0x5a0 <main+0x4>

000005a6 <DIO_setPinDir>:
* this example set the first 4 bits to 0xF HIGH and the last 4 bits to 0x0 LOW
* void return.
*/
void DIO_writePort(EN_PORTS_t port,uint8_t bin_pins)
{
	REG(port)=bin_pins;
     5a6:	41 30       	cpi	r20, 0x01	; 1
     5a8:	69 f4       	brne	.+26     	; 0x5c4 <DIO_setPinDir+0x1e>
     5aa:	e8 2f       	mov	r30, r24
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	22 91       	ld	r18, -Z
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_setPinDir+0x14>
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	6a 95       	dec	r22
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_setPinDir+0x10>
     5be:	82 2b       	or	r24, r18
     5c0:	80 83       	st	Z, r24
     5c2:	08 95       	ret
     5c4:	41 11       	cpse	r20, r1
     5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <DIO_setPinDir+0x4e>
     5c8:	e8 2f       	mov	r30, r24
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	df 01       	movw	r26, r30
     5ce:	2e 91       	ld	r18, -X
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_setPinDir+0x34>
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	6a 95       	dec	r22
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_setPinDir+0x30>
     5de:	98 2f       	mov	r25, r24
     5e0:	90 95       	com	r25
     5e2:	92 23       	and	r25, r18
     5e4:	9c 93       	st	X, r25
     5e6:	90 b7       	in	r25, 0x30	; 48
     5e8:	94 60       	ori	r25, 0x04	; 4
     5ea:	90 bf       	out	0x30, r25	; 48
     5ec:	90 81       	ld	r25, Z
     5ee:	89 2b       	or	r24, r25
     5f0:	80 83       	st	Z, r24
     5f2:	08 95       	ret
     5f4:	42 30       	cpi	r20, 0x02	; 2
     5f6:	a9 f4       	brne	.+42     	; 0x622 <DIO_setPinDir+0x7c>
     5f8:	e8 2f       	mov	r30, r24
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	df 01       	movw	r26, r30
     5fe:	2e 91       	ld	r18, -X
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_setPinDir+0x64>
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	6a 95       	dec	r22
     60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_setPinDir+0x60>
     60e:	98 2f       	mov	r25, r24
     610:	90 95       	com	r25
     612:	92 23       	and	r25, r18
     614:	9c 93       	st	X, r25
     616:	90 b7       	in	r25, 0x30	; 48
     618:	9b 7f       	andi	r25, 0xFB	; 251
     61a:	90 bf       	out	0x30, r25	; 48
     61c:	90 81       	ld	r25, Z
     61e:	89 2b       	or	r24, r25
     620:	80 83       	st	Z, r24
     622:	08 95       	ret

00000624 <DIO_write>:
     624:	41 30       	cpi	r20, 0x01	; 1
     626:	69 f4       	brne	.+26     	; 0x642 <DIO_write+0x1e>
     628:	e8 2f       	mov	r30, r24
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	20 81       	ld	r18, Z
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_write+0x14>
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	6a 95       	dec	r22
     63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_write+0x10>
     63c:	82 2b       	or	r24, r18
     63e:	80 83       	st	Z, r24
     640:	08 95       	ret
     642:	e8 2f       	mov	r30, r24
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	20 81       	ld	r18, Z
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_write+0x2e>
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	6a 95       	dec	r22
     654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_write+0x2a>
     656:	80 95       	com	r24
     658:	82 23       	and	r24, r18
     65a:	80 83       	st	Z, r24
     65c:	08 95       	ret

0000065e <DIO_setPin>:
     65e:	e8 2f       	mov	r30, r24
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_setPin+0x10>
     66a:	22 0f       	add	r18, r18
     66c:	33 1f       	adc	r19, r19
     66e:	6a 95       	dec	r22
     670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_setPin+0xc>
     672:	28 2b       	or	r18, r24
     674:	20 83       	st	Z, r18
     676:	08 95       	ret

00000678 <DIO_clearPin>:
*Function to clear Pin to LOW 
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
*/	
void DIO_clearPin(EN_PORTS_t port,EN_PINS_t pin)
{
	CLRBIT(REG(port),pin);
     678:	e8 2f       	mov	r30, r24
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_clearPin+0x10>
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	6a 95       	dec	r22
     68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_clearPin+0xc>
     68c:	20 95       	com	r18
     68e:	28 23       	and	r18, r24
     690:	20 83       	st	Z, r18
     692:	08 95       	ret

00000694 <DIO_getPin>:
*Inputs : EN_PORTS_t port ,EN_PINS_t pin no
* return uint8_t that holds the input value
*/	
uint8_t DIO_getPin(EN_PORTS_t port,EN_PINS_t pin)
{
	return GETBIT(REG(port-0x02),(uint8_t)pin);
     694:	e8 2f       	mov	r30, r24
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	32 97       	sbiw	r30, 0x02	; 2
     69a:	80 81       	ld	r24, Z
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_getPin+0x10>
     6a0:	95 95       	asr	r25
     6a2:	87 95       	ror	r24
     6a4:	6a 95       	dec	r22
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_getPin+0xc>
}
     6a8:	81 70       	andi	r24, 0x01	; 1
     6aa:	08 95       	ret

000006ac <adjustPrescalarT0>:
void Timer_Stop(EN_TIMER_t timer){
	if (timer == TIMER1){
		TCCR1B =0x00;
	}
	else{
		REG(timer) = 0x00;
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	91 05       	cpc	r25, r1
     6b0:	51 f4       	brne	.+20     	; 0x6c6 <adjustPrescalarT0+0x1a>
     6b2:	83 b7       	in	r24, 0x33	; 51
     6b4:	81 60       	ori	r24, 0x01	; 1
     6b6:	83 bf       	out	0x33, r24	; 51
     6b8:	83 b7       	in	r24, 0x33	; 51
     6ba:	8d 7f       	andi	r24, 0xFD	; 253
     6bc:	83 bf       	out	0x33, r24	; 51
     6be:	83 b7       	in	r24, 0x33	; 51
     6c0:	8b 7f       	andi	r24, 0xFB	; 251
     6c2:	83 bf       	out	0x33, r24	; 51
     6c4:	08 95       	ret
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	91 05       	cpc	r25, r1
     6ca:	51 f4       	brne	.+20     	; 0x6e0 <adjustPrescalarT0+0x34>
     6cc:	83 b7       	in	r24, 0x33	; 51
     6ce:	8e 7f       	andi	r24, 0xFE	; 254
     6d0:	83 bf       	out	0x33, r24	; 51
     6d2:	83 b7       	in	r24, 0x33	; 51
     6d4:	82 60       	ori	r24, 0x02	; 2
     6d6:	83 bf       	out	0x33, r24	; 51
     6d8:	83 b7       	in	r24, 0x33	; 51
     6da:	8b 7f       	andi	r24, 0xFB	; 251
     6dc:	83 bf       	out	0x33, r24	; 51
     6de:	08 95       	ret
     6e0:	80 34       	cpi	r24, 0x40	; 64
     6e2:	91 05       	cpc	r25, r1
     6e4:	51 f4       	brne	.+20     	; 0x6fa <adjustPrescalarT0+0x4e>
     6e6:	83 b7       	in	r24, 0x33	; 51
     6e8:	81 60       	ori	r24, 0x01	; 1
     6ea:	83 bf       	out	0x33, r24	; 51
     6ec:	83 b7       	in	r24, 0x33	; 51
     6ee:	82 60       	ori	r24, 0x02	; 2
     6f0:	83 bf       	out	0x33, r24	; 51
     6f2:	83 b7       	in	r24, 0x33	; 51
     6f4:	8b 7f       	andi	r24, 0xFB	; 251
     6f6:	83 bf       	out	0x33, r24	; 51
     6f8:	08 95       	ret
     6fa:	81 15       	cp	r24, r1
     6fc:	21 e0       	ldi	r18, 0x01	; 1
     6fe:	92 07       	cpc	r25, r18
     700:	51 f4       	brne	.+20     	; 0x716 <adjustPrescalarT0+0x6a>
     702:	83 b7       	in	r24, 0x33	; 51
     704:	8e 7f       	andi	r24, 0xFE	; 254
     706:	83 bf       	out	0x33, r24	; 51
     708:	83 b7       	in	r24, 0x33	; 51
     70a:	8d 7f       	andi	r24, 0xFD	; 253
     70c:	83 bf       	out	0x33, r24	; 51
     70e:	83 b7       	in	r24, 0x33	; 51
     710:	84 60       	ori	r24, 0x04	; 4
     712:	83 bf       	out	0x33, r24	; 51
     714:	08 95       	ret
     716:	81 15       	cp	r24, r1
     718:	94 40       	sbci	r25, 0x04	; 4
     71a:	49 f4       	brne	.+18     	; 0x72e <adjustPrescalarT0+0x82>
     71c:	83 b7       	in	r24, 0x33	; 51
     71e:	81 60       	ori	r24, 0x01	; 1
     720:	83 bf       	out	0x33, r24	; 51
     722:	83 b7       	in	r24, 0x33	; 51
     724:	8d 7f       	andi	r24, 0xFD	; 253
     726:	83 bf       	out	0x33, r24	; 51
     728:	83 b7       	in	r24, 0x33	; 51
     72a:	84 60       	ori	r24, 0x04	; 4
     72c:	83 bf       	out	0x33, r24	; 51
     72e:	08 95       	ret

00000730 <adjustPrescalarT1>:
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	91 05       	cpc	r25, r1
     734:	51 f4       	brne	.+20     	; 0x74a <adjustPrescalarT1+0x1a>
     736:	8e b5       	in	r24, 0x2e	; 46
     738:	81 60       	ori	r24, 0x01	; 1
     73a:	8e bd       	out	0x2e, r24	; 46
     73c:	8e b5       	in	r24, 0x2e	; 46
     73e:	8d 7f       	andi	r24, 0xFD	; 253
     740:	8e bd       	out	0x2e, r24	; 46
     742:	8e b5       	in	r24, 0x2e	; 46
     744:	8b 7f       	andi	r24, 0xFB	; 251
     746:	8e bd       	out	0x2e, r24	; 46
     748:	08 95       	ret
     74a:	88 30       	cpi	r24, 0x08	; 8
     74c:	91 05       	cpc	r25, r1
     74e:	51 f4       	brne	.+20     	; 0x764 <adjustPrescalarT1+0x34>
     750:	8e b5       	in	r24, 0x2e	; 46
     752:	8e 7f       	andi	r24, 0xFE	; 254
     754:	8e bd       	out	0x2e, r24	; 46
     756:	8e b5       	in	r24, 0x2e	; 46
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	8e bd       	out	0x2e, r24	; 46
     75c:	8e b5       	in	r24, 0x2e	; 46
     75e:	8b 7f       	andi	r24, 0xFB	; 251
     760:	8e bd       	out	0x2e, r24	; 46
     762:	08 95       	ret
     764:	80 34       	cpi	r24, 0x40	; 64
     766:	91 05       	cpc	r25, r1
     768:	51 f4       	brne	.+20     	; 0x77e <adjustPrescalarT1+0x4e>
     76a:	8e b5       	in	r24, 0x2e	; 46
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	8e bd       	out	0x2e, r24	; 46
     770:	8e b5       	in	r24, 0x2e	; 46
     772:	82 60       	ori	r24, 0x02	; 2
     774:	8e bd       	out	0x2e, r24	; 46
     776:	8e b5       	in	r24, 0x2e	; 46
     778:	8b 7f       	andi	r24, 0xFB	; 251
     77a:	8e bd       	out	0x2e, r24	; 46
     77c:	08 95       	ret
     77e:	81 15       	cp	r24, r1
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	92 07       	cpc	r25, r18
     784:	51 f4       	brne	.+20     	; 0x79a <adjustPrescalarT1+0x6a>
     786:	8e b5       	in	r24, 0x2e	; 46
     788:	8e 7f       	andi	r24, 0xFE	; 254
     78a:	8e bd       	out	0x2e, r24	; 46
     78c:	8e b5       	in	r24, 0x2e	; 46
     78e:	8d 7f       	andi	r24, 0xFD	; 253
     790:	8e bd       	out	0x2e, r24	; 46
     792:	8e b5       	in	r24, 0x2e	; 46
     794:	84 60       	ori	r24, 0x04	; 4
     796:	8e bd       	out	0x2e, r24	; 46
     798:	08 95       	ret
     79a:	81 15       	cp	r24, r1
     79c:	94 40       	sbci	r25, 0x04	; 4
     79e:	49 f4       	brne	.+18     	; 0x7b2 <adjustPrescalarT1+0x82>
     7a0:	8e b5       	in	r24, 0x2e	; 46
     7a2:	81 60       	ori	r24, 0x01	; 1
     7a4:	8e bd       	out	0x2e, r24	; 46
     7a6:	8e b5       	in	r24, 0x2e	; 46
     7a8:	8d 7f       	andi	r24, 0xFD	; 253
     7aa:	8e bd       	out	0x2e, r24	; 46
     7ac:	8e b5       	in	r24, 0x2e	; 46
     7ae:	84 60       	ori	r24, 0x04	; 4
     7b0:	8e bd       	out	0x2e, r24	; 46
     7b2:	08 95       	ret

000007b4 <adjustPrescalarT2>:
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	91 05       	cpc	r25, r1
     7b8:	51 f4       	brne	.+20     	; 0x7ce <adjustPrescalarT2+0x1a>
     7ba:	85 b5       	in	r24, 0x25	; 37
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	85 bd       	out	0x25, r24	; 37
     7c0:	85 b5       	in	r24, 0x25	; 37
     7c2:	8d 7f       	andi	r24, 0xFD	; 253
     7c4:	85 bd       	out	0x25, r24	; 37
     7c6:	85 b5       	in	r24, 0x25	; 37
     7c8:	8b 7f       	andi	r24, 0xFB	; 251
     7ca:	85 bd       	out	0x25, r24	; 37
     7cc:	08 95       	ret
     7ce:	88 30       	cpi	r24, 0x08	; 8
     7d0:	91 05       	cpc	r25, r1
     7d2:	51 f4       	brne	.+20     	; 0x7e8 <adjustPrescalarT2+0x34>
     7d4:	85 b5       	in	r24, 0x25	; 37
     7d6:	8e 7f       	andi	r24, 0xFE	; 254
     7d8:	85 bd       	out	0x25, r24	; 37
     7da:	85 b5       	in	r24, 0x25	; 37
     7dc:	82 60       	ori	r24, 0x02	; 2
     7de:	85 bd       	out	0x25, r24	; 37
     7e0:	85 b5       	in	r24, 0x25	; 37
     7e2:	8b 7f       	andi	r24, 0xFB	; 251
     7e4:	85 bd       	out	0x25, r24	; 37
     7e6:	08 95       	ret
     7e8:	80 32       	cpi	r24, 0x20	; 32
     7ea:	91 05       	cpc	r25, r1
     7ec:	51 f4       	brne	.+20     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7ee:	85 b5       	in	r24, 0x25	; 37
     7f0:	81 60       	ori	r24, 0x01	; 1
     7f2:	85 bd       	out	0x25, r24	; 37
     7f4:	85 b5       	in	r24, 0x25	; 37
     7f6:	82 60       	ori	r24, 0x02	; 2
     7f8:	85 bd       	out	0x25, r24	; 37
     7fa:	85 b5       	in	r24, 0x25	; 37
     7fc:	8b 7f       	andi	r24, 0xFB	; 251
     7fe:	85 bd       	out	0x25, r24	; 37
     800:	08 95       	ret
     802:	80 34       	cpi	r24, 0x40	; 64
     804:	91 05       	cpc	r25, r1
     806:	51 f4       	brne	.+20     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     808:	85 b5       	in	r24, 0x25	; 37
     80a:	8e 7f       	andi	r24, 0xFE	; 254
     80c:	85 bd       	out	0x25, r24	; 37
     80e:	85 b5       	in	r24, 0x25	; 37
     810:	8d 7f       	andi	r24, 0xFD	; 253
     812:	85 bd       	out	0x25, r24	; 37
     814:	85 b5       	in	r24, 0x25	; 37
     816:	84 60       	ori	r24, 0x04	; 4
     818:	85 bd       	out	0x25, r24	; 37
     81a:	08 95       	ret
     81c:	80 38       	cpi	r24, 0x80	; 128
     81e:	91 05       	cpc	r25, r1
     820:	51 f4       	brne	.+20     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     822:	85 b5       	in	r24, 0x25	; 37
     824:	81 60       	ori	r24, 0x01	; 1
     826:	85 bd       	out	0x25, r24	; 37
     828:	85 b5       	in	r24, 0x25	; 37
     82a:	8d 7f       	andi	r24, 0xFD	; 253
     82c:	85 bd       	out	0x25, r24	; 37
     82e:	85 b5       	in	r24, 0x25	; 37
     830:	84 60       	ori	r24, 0x04	; 4
     832:	85 bd       	out	0x25, r24	; 37
     834:	08 95       	ret
     836:	81 15       	cp	r24, r1
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	92 07       	cpc	r25, r18
     83c:	51 f4       	brne	.+20     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     83e:	85 b5       	in	r24, 0x25	; 37
     840:	8e 7f       	andi	r24, 0xFE	; 254
     842:	85 bd       	out	0x25, r24	; 37
     844:	85 b5       	in	r24, 0x25	; 37
     846:	82 60       	ori	r24, 0x02	; 2
     848:	85 bd       	out	0x25, r24	; 37
     84a:	85 b5       	in	r24, 0x25	; 37
     84c:	84 60       	ori	r24, 0x04	; 4
     84e:	85 bd       	out	0x25, r24	; 37
     850:	08 95       	ret
     852:	81 15       	cp	r24, r1
     854:	94 40       	sbci	r25, 0x04	; 4
     856:	49 f4       	brne	.+18     	; 0x86a <__stack+0xb>
     858:	85 b5       	in	r24, 0x25	; 37
     85a:	81 60       	ori	r24, 0x01	; 1
     85c:	85 bd       	out	0x25, r24	; 37
     85e:	85 b5       	in	r24, 0x25	; 37
     860:	82 60       	ori	r24, 0x02	; 2
     862:	85 bd       	out	0x25, r24	; 37
     864:	85 b5       	in	r24, 0x25	; 37
     866:	84 60       	ori	r24, 0x04	; 4
     868:	85 bd       	out	0x25, r24	; 37
     86a:	08 95       	ret

0000086c <Timer_init>:
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	00 d0       	rcall	.+0      	; 0x872 <Timer_init+0x6>
     872:	00 d0       	rcall	.+0      	; 0x874 <Timer_init+0x8>
     874:	00 d0       	rcall	.+0      	; 0x876 <Timer_init+0xa>
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	49 83       	std	Y+1, r20	; 0x01
     87c:	5a 83       	std	Y+2, r21	; 0x02
     87e:	6b 83       	std	Y+3, r22	; 0x03
     880:	7c 83       	std	Y+4, r23	; 0x04
     882:	8d 83       	std	Y+5, r24	; 0x05
     884:	9e 83       	std	Y+6, r25	; 0x06
     886:	91 11       	cpse	r25, r1
     888:	04 c0       	rjmp	.+8      	; 0x892 <Timer_init+0x26>
     88a:	e4 2f       	mov	r30, r20
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	10 82       	st	Z, r1
     890:	23 c0       	rjmp	.+70     	; 0x8d8 <Timer_init+0x6c>
     892:	91 30       	cpi	r25, 0x01	; 1
     894:	89 f4       	brne	.+34     	; 0x8b8 <Timer_init+0x4c>
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	83 35       	cpi	r24, 0x53	; 83
     89a:	19 f4       	brne	.+6      	; 0x8a2 <Timer_init+0x36>
     89c:	87 b3       	in	r24, 0x17	; 23
     89e:	88 60       	ori	r24, 0x08	; 8
     8a0:	87 bb       	out	0x17, r24	; 23
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	85 34       	cpi	r24, 0x45	; 69
     8a6:	19 f4       	brne	.+6      	; 0x8ae <Timer_init+0x42>
     8a8:	81 b3       	in	r24, 0x11	; 17
     8aa:	80 68       	ori	r24, 0x80	; 128
     8ac:	81 bb       	out	0x11, r24	; 17
     8ae:	e9 81       	ldd	r30, Y+1	; 0x01
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	89 e6       	ldi	r24, 0x69	; 105
     8b4:	80 83       	st	Z, r24
     8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <Timer_init+0x6c>
     8b8:	92 30       	cpi	r25, 0x02	; 2
     8ba:	71 f4       	brne	.+28     	; 0x8d8 <Timer_init+0x6c>
     8bc:	e9 81       	ldd	r30, Y+1	; 0x01
     8be:	ef 34       	cpi	r30, 0x4F	; 79
     8c0:	41 f4       	brne	.+16     	; 0x8d2 <Timer_init+0x66>
     8c2:	1f bc       	out	0x2f, r1	; 47
     8c4:	8e b5       	in	r24, 0x2e	; 46
     8c6:	88 60       	ori	r24, 0x08	; 8
     8c8:	8e bd       	out	0x2e, r24	; 46
     8ca:	8e b5       	in	r24, 0x2e	; 46
     8cc:	8f 7e       	andi	r24, 0xEF	; 239
     8ce:	8e bd       	out	0x2e, r24	; 46
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <Timer_init+0x6c>
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	88 e0       	ldi	r24, 0x08	; 8
     8d6:	80 83       	st	Z, r24
     8d8:	26 96       	adiw	r28, 0x06	; 6
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <Timer_Delay>:
     8ea:	4f 92       	push	r4
     8ec:	5f 92       	push	r5
     8ee:	6f 92       	push	r6
     8f0:	7f 92       	push	r7
     8f2:	8f 92       	push	r8
     8f4:	9f 92       	push	r9
     8f6:	af 92       	push	r10
     8f8:	bf 92       	push	r11
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	2a 97       	sbiw	r28, 0x0a	; 10
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	6b 01       	movw	r12, r22
     91c:	7c 01       	movw	r14, r24
     91e:	09 83       	std	Y+1, r16	; 0x01
     920:	1a 83       	std	Y+2, r17	; 0x02
     922:	2b 83       	std	Y+3, r18	; 0x03
     924:	3c 83       	std	Y+4, r19	; 0x04
     926:	4d 83       	std	Y+5, r20	; 0x05
     928:	5e 83       	std	Y+6, r21	; 0x06
     92a:	03 35       	cpi	r16, 0x53	; 83
     92c:	09 f0       	breq	.+2      	; 0x930 <Timer_Delay+0x46>
     92e:	71 c0       	rjmp	.+226    	; 0xa12 <Timer_Delay+0x128>
     930:	37 c0       	rjmp	.+110    	; 0x9a0 <Timer_Delay+0xb6>
     932:	6a 81       	ldd	r22, Y+2	; 0x02
     934:	7b 81       	ldd	r23, Y+3	; 0x03
     936:	8c 81       	ldd	r24, Y+4	; 0x04
     938:	9d 81       	ldd	r25, Y+5	; 0x05
     93a:	e1 2f       	mov	r30, r17
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	e6 58       	subi	r30, 0x86	; 134
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	a0 80       	ld	r10, Z
     948:	b1 80       	ldd	r11, Z+1	; 0x01
     94a:	95 01       	movw	r18, r10
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__udivmodsi4>
     954:	84 2f       	mov	r24, r20
     956:	95 2f       	mov	r25, r21
     958:	42 2e       	mov	r4, r18
     95a:	53 2e       	mov	r5, r19
     95c:	64 2e       	mov	r6, r20
     95e:	75 2e       	mov	r7, r21
     960:	62 2f       	mov	r22, r18
     962:	73 2f       	mov	r23, r19
     964:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     968:	6f 83       	std	Y+7, r22	; 0x07
     96a:	78 87       	std	Y+8, r23	; 0x08
     96c:	89 87       	std	Y+9, r24	; 0x09
     96e:	9a 87       	std	Y+10, r25	; 0x0a
     970:	a7 01       	movw	r20, r14
     972:	96 01       	movw	r18, r12
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	8f e7       	ldi	r24, 0x7F	; 127
     97a:	93 e4       	ldi	r25, 0x43	; 67
     97c:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     980:	9b 01       	movw	r18, r22
     982:	ac 01       	movw	r20, r24
     984:	6f 81       	ldd	r22, Y+7	; 0x07
     986:	78 85       	ldd	r23, Y+8	; 0x08
     988:	89 85       	ldd	r24, Y+9	; 0x09
     98a:	9a 85       	ldd	r25, Y+10	; 0x0a
     98c:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     990:	88 23       	and	r24, r24
     992:	24 f4       	brge	.+8      	; 0x99c <Timer_Delay+0xb2>
     994:	45 28       	or	r4, r5
     996:	46 28       	or	r4, r6
     998:	47 28       	or	r4, r7
     99a:	49 f4       	brne	.+18     	; 0x9ae <Timer_Delay+0xc4>
     99c:	1f 5f       	subi	r17, 0xFF	; 255
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <Timer_Delay+0xb8>
     9a0:	10 e0       	ldi	r17, 0x00	; 0
     9a2:	15 30       	cpi	r17, 0x05	; 5
     9a4:	30 f2       	brcs	.-116    	; 0x932 <Timer_Delay+0x48>
     9a6:	01 e0       	ldi	r16, 0x01	; 1
     9a8:	10 e0       	ldi	r17, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <Timer_Delay+0xc8>
     9ae:	85 01       	movw	r16, r10
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <Timer_Delay+0xce>
     9b6:	38 c1       	rjmp	.+624    	; 0xc28 <Timer_Delay+0x33e>
     9b8:	c8 01       	movw	r24, r16
     9ba:	0e 94 56 03 	call	0x6ac	; 0x6ac <adjustPrescalarT0>
     9be:	6a 81       	ldd	r22, Y+2	; 0x02
     9c0:	7b 81       	ldd	r23, Y+3	; 0x03
     9c2:	8c 81       	ldd	r24, Y+4	; 0x04
     9c4:	9d 81       	ldd	r25, Y+5	; 0x05
     9c6:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     9ca:	a7 01       	movw	r20, r14
     9cc:	96 01       	movw	r18, r12
     9ce:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     9d2:	6b 01       	movw	r12, r22
     9d4:	7c 01       	movw	r14, r24
     9d6:	b8 01       	movw	r22, r16
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	c7 01       	movw	r24, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     9ec:	9b 01       	movw	r18, r22
     9ee:	ac 01       	movw	r20, r24
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	8f e7       	ldi	r24, 0x7F	; 127
     9f6:	93 e4       	ldi	r25, 0x43	; 67
     9f8:	0e 94 3b 08 	call	0x1076	; 0x1076 <__subsf3>
     9fc:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixsfsi>
     a00:	62 bf       	out	0x32, r22	; 50
     a02:	08 b6       	in	r0, 0x38	; 56
     a04:	00 fe       	sbrs	r0, 0
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <Timer_Delay+0x118>
     a08:	88 b7       	in	r24, 0x38	; 56
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	88 bf       	out	0x38, r24	; 56
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	10 c1       	rjmp	.+544    	; 0xc32 <Timer_Delay+0x348>
     a12:	05 34       	cpi	r16, 0x45	; 69
     a14:	09 f0       	breq	.+2      	; 0xa18 <Timer_Delay+0x12e>
     a16:	71 c0       	rjmp	.+226    	; 0xafa <Timer_Delay+0x210>
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <Timer_Delay+0x19e>
     a1a:	6a 81       	ldd	r22, Y+2	; 0x02
     a1c:	7b 81       	ldd	r23, Y+3	; 0x03
     a1e:	8c 81       	ldd	r24, Y+4	; 0x04
     a20:	9d 81       	ldd	r25, Y+5	; 0x05
     a22:	e1 2f       	mov	r30, r17
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	e4 59       	subi	r30, 0x94	; 148
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	a0 80       	ld	r10, Z
     a30:	b1 80       	ldd	r11, Z+1	; 0x01
     a32:	95 01       	movw	r18, r10
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__udivmodsi4>
     a3c:	84 2f       	mov	r24, r20
     a3e:	95 2f       	mov	r25, r21
     a40:	42 2e       	mov	r4, r18
     a42:	53 2e       	mov	r5, r19
     a44:	64 2e       	mov	r6, r20
     a46:	75 2e       	mov	r7, r21
     a48:	62 2f       	mov	r22, r18
     a4a:	73 2f       	mov	r23, r19
     a4c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     a50:	6f 83       	std	Y+7, r22	; 0x07
     a52:	78 87       	std	Y+8, r23	; 0x08
     a54:	89 87       	std	Y+9, r24	; 0x09
     a56:	9a 87       	std	Y+10, r25	; 0x0a
     a58:	a7 01       	movw	r20, r14
     a5a:	96 01       	movw	r18, r12
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8f e7       	ldi	r24, 0x7F	; 127
     a62:	93 e4       	ldi	r25, 0x43	; 67
     a64:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     a68:	9b 01       	movw	r18, r22
     a6a:	ac 01       	movw	r20, r24
     a6c:	6f 81       	ldd	r22, Y+7	; 0x07
     a6e:	78 85       	ldd	r23, Y+8	; 0x08
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     a78:	88 23       	and	r24, r24
     a7a:	24 f4       	brge	.+8      	; 0xa84 <Timer_Delay+0x19a>
     a7c:	45 28       	or	r4, r5
     a7e:	46 28       	or	r4, r6
     a80:	47 28       	or	r4, r7
     a82:	49 f4       	brne	.+18     	; 0xa96 <Timer_Delay+0x1ac>
     a84:	1f 5f       	subi	r17, 0xFF	; 255
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <Timer_Delay+0x1a0>
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	17 30       	cpi	r17, 0x07	; 7
     a8c:	30 f2       	brcs	.-116    	; 0xa1a <Timer_Delay+0x130>
     a8e:	01 e0       	ldi	r16, 0x01	; 1
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <Timer_Delay+0x1b0>
     a96:	85 01       	movw	r16, r10
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	88 23       	and	r24, r24
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <Timer_Delay+0x1b6>
     a9e:	c6 c0       	rjmp	.+396    	; 0xc2c <Timer_Delay+0x342>
     aa0:	c8 01       	movw	r24, r16
     aa2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <adjustPrescalarT2>
     aa6:	6a 81       	ldd	r22, Y+2	; 0x02
     aa8:	7b 81       	ldd	r23, Y+3	; 0x03
     aaa:	8c 81       	ldd	r24, Y+4	; 0x04
     aac:	9d 81       	ldd	r25, Y+5	; 0x05
     aae:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     ab2:	a7 01       	movw	r20, r14
     ab4:	96 01       	movw	r18, r12
     ab6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     aba:	6b 01       	movw	r12, r22
     abc:	7c 01       	movw	r14, r24
     abe:	b8 01       	movw	r22, r16
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     ac8:	9b 01       	movw	r18, r22
     aca:	ac 01       	movw	r20, r24
     acc:	c7 01       	movw	r24, r14
     ace:	b6 01       	movw	r22, r12
     ad0:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	8f e7       	ldi	r24, 0x7F	; 127
     ade:	93 e4       	ldi	r25, 0x43	; 67
     ae0:	0e 94 3b 08 	call	0x1076	; 0x1076 <__subsf3>
     ae4:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixsfsi>
     ae8:	64 bd       	out	0x24, r22	; 36
     aea:	08 b6       	in	r0, 0x38	; 56
     aec:	06 fe       	sbrs	r0, 6
     aee:	fd cf       	rjmp	.-6      	; 0xaea <Timer_Delay+0x200>
     af0:	88 b7       	in	r24, 0x38	; 56
     af2:	80 64       	ori	r24, 0x40	; 64
     af4:	88 bf       	out	0x38, r24	; 56
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	9c c0       	rjmp	.+312    	; 0xc32 <Timer_Delay+0x348>
     afa:	0f 34       	cpi	r16, 0x4F	; 79
     afc:	e9 f1       	breq	.+122    	; 0xb78 <Timer_Delay+0x28e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	98 c0       	rjmp	.+304    	; 0xc32 <Timer_Delay+0x348>
     b02:	6a 81       	ldd	r22, Y+2	; 0x02
     b04:	7b 81       	ldd	r23, Y+3	; 0x03
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	9d 81       	ldd	r25, Y+5	; 0x05
     b0a:	e1 2f       	mov	r30, r17
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	e6 58       	subi	r30, 0x86	; 134
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	a0 80       	ld	r10, Z
     b18:	b1 80       	ldd	r11, Z+1	; 0x01
     b1a:	95 01       	movw	r18, r10
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__udivmodsi4>
     b24:	29 01       	movw	r4, r18
     b26:	3a 01       	movw	r6, r20
     b28:	b9 01       	movw	r22, r18
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     b32:	6f 83       	std	Y+7, r22	; 0x07
     b34:	78 87       	std	Y+8, r23	; 0x08
     b36:	89 87       	std	Y+9, r24	; 0x09
     b38:	9a 87       	std	Y+10, r25	; 0x0a
     b3a:	a7 01       	movw	r20, r14
     b3c:	96 01       	movw	r18, r12
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	97 e4       	ldi	r25, 0x47	; 71
     b46:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
     b4e:	6f 81       	ldd	r22, Y+7	; 0x07
     b50:	78 85       	ldd	r23, Y+8	; 0x08
     b52:	89 85       	ldd	r24, Y+9	; 0x09
     b54:	9a 85       	ldd	r25, Y+10	; 0x0a
     b56:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     b5a:	88 23       	and	r24, r24
     b5c:	5c f4       	brge	.+22     	; 0xb74 <Timer_Delay+0x28a>
     b5e:	c3 01       	movw	r24, r6
     b60:	b2 01       	movw	r22, r4
     b62:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	a9 01       	movw	r20, r18
     b6c:	0e 94 07 0a 	call	0x140e	; 0x140e <__gesf2>
     b70:	18 16       	cp	r1, r24
     b72:	4c f0       	brlt	.+18     	; 0xb86 <Timer_Delay+0x29c>
     b74:	1f 5f       	subi	r17, 0xFF	; 255
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <Timer_Delay+0x290>
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	15 30       	cpi	r17, 0x05	; 5
     b7c:	10 f2       	brcs	.-124    	; 0xb02 <Timer_Delay+0x218>
     b7e:	01 e0       	ldi	r16, 0x01	; 1
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <Timer_Delay+0x2a0>
     b86:	85 01       	movw	r16, r10
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	88 23       	and	r24, r24
     b8c:	09 f4       	brne	.+2      	; 0xb90 <Timer_Delay+0x2a6>
     b8e:	50 c0       	rjmp	.+160    	; 0xc30 <Timer_Delay+0x346>
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 98 03 	call	0x730	; 0x730 <adjustPrescalarT1>
     b96:	6a 81       	ldd	r22, Y+2	; 0x02
     b98:	7b 81       	ldd	r23, Y+3	; 0x03
     b9a:	8c 81       	ldd	r24, Y+4	; 0x04
     b9c:	9d 81       	ldd	r25, Y+5	; 0x05
     b9e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     ba2:	a7 01       	movw	r20, r14
     ba4:	96 01       	movw	r18, r12
     ba6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     baa:	2b 01       	movw	r4, r22
     bac:	3c 01       	movw	r6, r24
     bae:	b8 01       	movw	r22, r16
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     bb8:	4b 01       	movw	r8, r22
     bba:	5c 01       	movw	r10, r24
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	c3 01       	movw	r24, r6
     bc2:	b2 01       	movw	r22, r4
     bc4:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e8       	ldi	r24, 0x80	; 128
     bd2:	97 e4       	ldi	r25, 0x47	; 71
     bd4:	0e 94 3b 08 	call	0x1076	; 0x1076 <__subsf3>
     bd8:	0e 94 26 09 	call	0x124c	; 0x124c <__fixunssfsi>
     bdc:	7d bd       	out	0x2d, r23	; 45
     bde:	6a 81       	ldd	r22, Y+2	; 0x02
     be0:	7b 81       	ldd	r23, Y+3	; 0x03
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	9d 81       	ldd	r25, Y+5	; 0x05
     be6:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     bea:	a7 01       	movw	r20, r14
     bec:	96 01       	movw	r18, r12
     bee:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     bf2:	a5 01       	movw	r20, r10
     bf4:	94 01       	movw	r18, r8
     bf6:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e8       	ldi	r24, 0x80	; 128
     c04:	97 e4       	ldi	r25, 0x47	; 71
     c06:	0e 94 3b 08 	call	0x1076	; 0x1076 <__subsf3>
     c0a:	0e 94 26 09 	call	0x124c	; 0x124c <__fixunssfsi>
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	67 2b       	or	r22, r23
     c12:	09 f4       	brne	.+2      	; 0xc16 <Timer_Delay+0x32c>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	2c bd       	out	0x2c, r18	; 44
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	02 fe       	sbrs	r0, 2
     c1c:	fd cf       	rjmp	.-6      	; 0xc18 <Timer_Delay+0x32e>
     c1e:	88 b7       	in	r24, 0x38	; 56
     c20:	84 60       	ori	r24, 0x04	; 4
     c22:	88 bf       	out	0x38, r24	; 56
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <Timer_Delay+0x348>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <Timer_Delay+0x348>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <Timer_Delay+0x348>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	2a 96       	adiw	r28, 0x0a	; 10
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	6f 90       	pop	r6
     c5a:	5f 90       	pop	r5
     c5c:	4f 90       	pop	r4
     c5e:	08 95       	ret

00000c60 <Timer_Schedule_Fun>:
     c60:	4f 92       	push	r4
     c62:	5f 92       	push	r5
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	00 d0       	rcall	.+0      	; 0xc82 <Timer_Schedule_Fun+0x22>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <Timer_Schedule_Fun+0x24>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <Timer_Schedule_Fun+0x26>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	09 83       	std	Y+1, r16	; 0x01
     c8c:	1a 83       	std	Y+2, r17	; 0x02
     c8e:	2b 83       	std	Y+3, r18	; 0x03
     c90:	3c 83       	std	Y+4, r19	; 0x04
     c92:	4d 83       	std	Y+5, r20	; 0x05
     c94:	5e 83       	std	Y+6, r21	; 0x06
     c96:	52 30       	cpi	r21, 0x02	; 2
     c98:	09 f0       	breq	.+2      	; 0xc9c <Timer_Schedule_Fun+0x3c>
     c9a:	58 c1       	rjmp	.+688    	; 0xf4c <Timer_Schedule_Fun+0x2ec>
     c9c:	97 01       	movw	r18, r14
     c9e:	6b 01       	movw	r12, r22
     ca0:	7c 01       	movw	r14, r24
     ca2:	8f b7       	in	r24, 0x3f	; 63
     ca4:	80 68       	ori	r24, 0x80	; 128
     ca6:	8f bf       	out	0x3f, r24	; 63
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	83 35       	cpi	r24, 0x53	; 83
     cac:	09 f0       	breq	.+2      	; 0xcb0 <Timer_Schedule_Fun+0x50>
     cae:	66 c0       	rjmp	.+204    	; 0xd7c <Timer_Schedule_Fun+0x11c>
     cb0:	89 b7       	in	r24, 0x39	; 57
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	89 bf       	out	0x39, r24	; 57
     cb6:	30 93 e1 00 	sts	0x00E1, r19	; 0x8000e1 <TIMER0_CM_ISR+0x1>
     cba:	20 93 e0 00 	sts	0x00E0, r18	; 0x8000e0 <TIMER0_CM_ISR>
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	33 c0       	rjmp	.+102    	; 0xd28 <Timer_Schedule_Fun+0xc8>
     cc2:	6a 81       	ldd	r22, Y+2	; 0x02
     cc4:	7b 81       	ldd	r23, Y+3	; 0x03
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     cce:	a7 01       	movw	r20, r14
     cd0:	96 01       	movw	r18, r12
     cd2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     cd6:	2b 01       	movw	r4, r22
     cd8:	3c 01       	movw	r6, r24
     cda:	e1 2f       	mov	r30, r17
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	e6 58       	subi	r30, 0x86	; 134
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	a0 80       	ld	r10, Z
     ce8:	b1 80       	ldd	r11, Z+1	; 0x01
     cea:	b5 01       	movw	r22, r10
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	c3 01       	movw	r24, r6
     cfa:	b2 01       	movw	r22, r4
     cfc:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     d00:	2b 01       	movw	r4, r22
     d02:	3c 01       	movw	r6, r24
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	53 e4       	ldi	r21, 0x43	; 67
     d0c:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     d10:	88 23       	and	r24, r24
     d12:	4c f4       	brge	.+18     	; 0xd26 <Timer_Schedule_Fun+0xc6>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	a9 01       	movw	r20, r18
     d1a:	c3 01       	movw	r24, r6
     d1c:	b2 01       	movw	r22, r4
     d1e:	0e 94 07 0a 	call	0x140e	; 0x140e <__gesf2>
     d22:	18 16       	cp	r1, r24
     d24:	3c f0       	brlt	.+14     	; 0xd34 <Timer_Schedule_Fun+0xd4>
     d26:	1f 5f       	subi	r17, 0xFF	; 255
     d28:	15 30       	cpi	r17, 0x05	; 5
     d2a:	58 f2       	brcs	.-106    	; 0xcc2 <Timer_Schedule_Fun+0x62>
     d2c:	01 e0       	ldi	r16, 0x01	; 1
     d2e:	10 e0       	ldi	r17, 0x00	; 0
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <Timer_Schedule_Fun+0xd8>
     d34:	85 01       	movw	r16, r10
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <Timer_Schedule_Fun+0xde>
     d3c:	09 c1       	rjmp	.+530    	; 0xf50 <Timer_Schedule_Fun+0x2f0>
     d3e:	c8 01       	movw	r24, r16
     d40:	0e 94 56 03 	call	0x6ac	; 0x6ac <adjustPrescalarT0>
     d44:	6a 81       	ldd	r22, Y+2	; 0x02
     d46:	7b 81       	ldd	r23, Y+3	; 0x03
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     d50:	a7 01       	movw	r20, r14
     d52:	96 01       	movw	r18, r12
     d54:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     d58:	6b 01       	movw	r12, r22
     d5a:	7c 01       	movw	r14, r24
     d5c:	b8 01       	movw	r22, r16
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     d66:	9b 01       	movw	r18, r22
     d68:	ac 01       	movw	r20, r24
     d6a:	c7 01       	movw	r24, r14
     d6c:	b6 01       	movw	r22, r12
     d6e:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     d72:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixsfsi>
     d76:	6c bf       	out	0x3c, r22	; 60
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	f1 c0       	rjmp	.+482    	; 0xf5e <Timer_Schedule_Fun+0x2fe>
     d7c:	85 34       	cpi	r24, 0x45	; 69
     d7e:	09 f0       	breq	.+2      	; 0xd82 <Timer_Schedule_Fun+0x122>
     d80:	66 c0       	rjmp	.+204    	; 0xe4e <Timer_Schedule_Fun+0x1ee>
     d82:	89 b7       	in	r24, 0x39	; 57
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	89 bf       	out	0x39, r24	; 57
     d88:	30 93 e3 00 	sts	0x00E3, r19	; 0x8000e3 <TIMER2_CM_ISR+0x1>
     d8c:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <TIMER2_CM_ISR>
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	33 c0       	rjmp	.+102    	; 0xdfa <Timer_Schedule_Fun+0x19a>
     d94:	6a 81       	ldd	r22, Y+2	; 0x02
     d96:	7b 81       	ldd	r23, Y+3	; 0x03
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     da0:	a7 01       	movw	r20, r14
     da2:	96 01       	movw	r18, r12
     da4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     da8:	2b 01       	movw	r4, r22
     daa:	3c 01       	movw	r6, r24
     dac:	e1 2f       	mov	r30, r17
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	e4 59       	subi	r30, 0x94	; 148
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	a0 80       	ld	r10, Z
     dba:	b1 80       	ldd	r11, Z+1	; 0x01
     dbc:	b5 01       	movw	r22, r10
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     dc6:	9b 01       	movw	r18, r22
     dc8:	ac 01       	movw	r20, r24
     dca:	c3 01       	movw	r24, r6
     dcc:	b2 01       	movw	r22, r4
     dce:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     dd2:	2b 01       	movw	r4, r22
     dd4:	3c 01       	movw	r6, r24
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	4f e7       	ldi	r20, 0x7F	; 127
     ddc:	53 e4       	ldi	r21, 0x43	; 67
     dde:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     de2:	88 23       	and	r24, r24
     de4:	4c f4       	brge	.+18     	; 0xdf8 <Timer_Schedule_Fun+0x198>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	a9 01       	movw	r20, r18
     dec:	c3 01       	movw	r24, r6
     dee:	b2 01       	movw	r22, r4
     df0:	0e 94 07 0a 	call	0x140e	; 0x140e <__gesf2>
     df4:	18 16       	cp	r1, r24
     df6:	3c f0       	brlt	.+14     	; 0xe06 <Timer_Schedule_Fun+0x1a6>
     df8:	1f 5f       	subi	r17, 0xFF	; 255
     dfa:	17 30       	cpi	r17, 0x07	; 7
     dfc:	58 f2       	brcs	.-106    	; 0xd94 <Timer_Schedule_Fun+0x134>
     dfe:	01 e0       	ldi	r16, 0x01	; 1
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <Timer_Schedule_Fun+0x1aa>
     e06:	85 01       	movw	r16, r10
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	88 23       	and	r24, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <Timer_Schedule_Fun+0x1b0>
     e0e:	a2 c0       	rjmp	.+324    	; 0xf54 <Timer_Schedule_Fun+0x2f4>
     e10:	c8 01       	movw	r24, r16
     e12:	0e 94 da 03 	call	0x7b4	; 0x7b4 <adjustPrescalarT2>
     e16:	6a 81       	ldd	r22, Y+2	; 0x02
     e18:	7b 81       	ldd	r23, Y+3	; 0x03
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     e22:	a7 01       	movw	r20, r14
     e24:	96 01       	movw	r18, r12
     e26:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     e2a:	6b 01       	movw	r12, r22
     e2c:	7c 01       	movw	r14, r24
     e2e:	b8 01       	movw	r22, r16
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     e38:	9b 01       	movw	r18, r22
     e3a:	ac 01       	movw	r20, r24
     e3c:	c7 01       	movw	r24, r14
     e3e:	b6 01       	movw	r22, r12
     e40:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     e44:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixsfsi>
     e48:	63 bd       	out	0x23, r22	; 35
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	88 c0       	rjmp	.+272    	; 0xf5e <Timer_Schedule_Fun+0x2fe>
     e4e:	8f 34       	cpi	r24, 0x4F	; 79
     e50:	09 f0       	breq	.+2      	; 0xe54 <Timer_Schedule_Fun+0x1f4>
     e52:	82 c0       	rjmp	.+260    	; 0xf58 <Timer_Schedule_Fun+0x2f8>
     e54:	89 b7       	in	r24, 0x39	; 57
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	89 bf       	out	0x39, r24	; 57
     e5a:	30 93 e5 00 	sts	0x00E5, r19	; 0x8000e5 <TIMER1_CMA_ISR+0x1>
     e5e:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <TIMER1_CMA_ISR>
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	33 c0       	rjmp	.+102    	; 0xecc <Timer_Schedule_Fun+0x26c>
     e66:	6a 81       	ldd	r22, Y+2	; 0x02
     e68:	7b 81       	ldd	r23, Y+3	; 0x03
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	9d 81       	ldd	r25, Y+5	; 0x05
     e6e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     e72:	a7 01       	movw	r20, r14
     e74:	96 01       	movw	r18, r12
     e76:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     e7a:	2b 01       	movw	r4, r22
     e7c:	3c 01       	movw	r6, r24
     e7e:	e1 2f       	mov	r30, r17
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	e6 58       	subi	r30, 0x86	; 134
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	a0 80       	ld	r10, Z
     e8c:	b1 80       	ldd	r11, Z+1	; 0x01
     e8e:	b5 01       	movw	r22, r10
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	c3 01       	movw	r24, r6
     e9e:	b2 01       	movw	r22, r4
     ea0:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     ea4:	2b 01       	movw	r4, r22
     ea6:	3c 01       	movw	r6, r24
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     eb4:	88 23       	and	r24, r24
     eb6:	4c f4       	brge	.+18     	; 0xeca <Timer_Schedule_Fun+0x26a>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	c3 01       	movw	r24, r6
     ec0:	b2 01       	movw	r22, r4
     ec2:	0e 94 07 0a 	call	0x140e	; 0x140e <__gesf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	3c f0       	brlt	.+14     	; 0xed8 <Timer_Schedule_Fun+0x278>
     eca:	1f 5f       	subi	r17, 0xFF	; 255
     ecc:	15 30       	cpi	r17, 0x05	; 5
     ece:	58 f2       	brcs	.-106    	; 0xe66 <Timer_Schedule_Fun+0x206>
     ed0:	01 e0       	ldi	r16, 0x01	; 1
     ed2:	10 e0       	ldi	r17, 0x00	; 0
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <Timer_Schedule_Fun+0x27c>
     ed8:	85 01       	movw	r16, r10
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	88 23       	and	r24, r24
     ede:	f1 f1       	breq	.+124    	; 0xf5c <Timer_Schedule_Fun+0x2fc>
     ee0:	c8 01       	movw	r24, r16
     ee2:	0e 94 98 03 	call	0x730	; 0x730 <adjustPrescalarT1>
     ee6:	6a 81       	ldd	r22, Y+2	; 0x02
     ee8:	7b 81       	ldd	r23, Y+3	; 0x03
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     ef2:	a7 01       	movw	r20, r14
     ef4:	96 01       	movw	r18, r12
     ef6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     efa:	2b 01       	movw	r4, r22
     efc:	3c 01       	movw	r6, r24
     efe:	b8 01       	movw	r22, r16
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     f08:	4b 01       	movw	r8, r22
     f0a:	5c 01       	movw	r10, r24
     f0c:	9b 01       	movw	r18, r22
     f0e:	ac 01       	movw	r20, r24
     f10:	c3 01       	movw	r24, r6
     f12:	b2 01       	movw	r22, r4
     f14:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     f18:	0e 94 26 09 	call	0x124c	; 0x124c <__fixunssfsi>
     f1c:	7b bd       	out	0x2b, r23	; 43
     f1e:	6a 81       	ldd	r22, Y+2	; 0x02
     f20:	7b 81       	ldd	r23, Y+3	; 0x03
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	0e 94 55 09 	call	0x12aa	; 0x12aa <__floatunsisf>
     f2a:	a7 01       	movw	r20, r14
     f2c:	96 01       	movw	r18, r12
     f2e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__mulsf3>
     f32:	a5 01       	movw	r20, r10
     f34:	94 01       	movw	r18, r8
     f36:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     f3a:	0e 94 26 09 	call	0x124c	; 0x124c <__fixunssfsi>
     f3e:	21 e0       	ldi	r18, 0x01	; 1
     f40:	67 2b       	or	r22, r23
     f42:	09 f4       	brne	.+2      	; 0xf46 <Timer_Schedule_Fun+0x2e6>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	2a bd       	out	0x2a, r18	; 42
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <Timer_Schedule_Fun+0x2fe>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <Timer_Schedule_Fun+0x2fe>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <Timer_Schedule_Fun+0x2fe>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <Timer_Schedule_Fun+0x2fe>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <Timer_Schedule_Fun+0x2fe>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	26 96       	adiw	r28, 0x06	; 6
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	7f 90       	pop	r7
     f84:	6f 90       	pop	r6
     f86:	5f 90       	pop	r5
     f88:	4f 90       	pop	r4
     f8a:	08 95       	ret

00000f8c <__vector_10>:
}


/* ISR DEFINITIONS */

void __vector_10(){
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
	TIMER0_CM_ISR();
     fae:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <TIMER0_CM_ISR>
     fb2:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <TIMER0_CM_ISR+0x1>
     fb6:	09 95       	icall
}
     fb8:	ff 91       	pop	r31
     fba:	ef 91       	pop	r30
     fbc:	bf 91       	pop	r27
     fbe:	af 91       	pop	r26
     fc0:	9f 91       	pop	r25
     fc2:	8f 91       	pop	r24
     fc4:	7f 91       	pop	r23
     fc6:	6f 91       	pop	r22
     fc8:	5f 91       	pop	r21
     fca:	4f 91       	pop	r20
     fcc:	3f 91       	pop	r19
     fce:	2f 91       	pop	r18
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <__vector_7>:

void __vector_7(){
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	TIMER1_CMA_ISR();
     ffc:	e0 91 e4 00 	lds	r30, 0x00E4	; 0x8000e4 <TIMER1_CMA_ISR>
    1000:	f0 91 e5 00 	lds	r31, 0x00E5	; 0x8000e5 <TIMER1_CMA_ISR+0x1>
    1004:	09 95       	icall
}
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <__vector_4>:

void __vector_4(){
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	ef 93       	push	r30
    1048:	ff 93       	push	r31
	TIMER2_CM_ISR();
    104a:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <TIMER2_CM_ISR>
    104e:	f0 91 e3 00 	lds	r31, 0x00E3	; 0x8000e3 <TIMER2_CM_ISR+0x1>
    1052:	09 95       	icall
}
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__subsf3>:
    1076:	50 58       	subi	r21, 0x80	; 128

00001078 <__addsf3>:
    1078:	bb 27       	eor	r27, r27
    107a:	aa 27       	eor	r26, r26
    107c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__addsf3x>
    1080:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_round>
    1084:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscA>
    1088:	38 f0       	brcs	.+14     	; 0x1098 <__addsf3+0x20>
    108a:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_pscB>
    108e:	20 f0       	brcs	.+8      	; 0x1098 <__addsf3+0x20>
    1090:	39 f4       	brne	.+14     	; 0x10a0 <__addsf3+0x28>
    1092:	9f 3f       	cpi	r25, 0xFF	; 255
    1094:	19 f4       	brne	.+6      	; 0x109c <__addsf3+0x24>
    1096:	26 f4       	brtc	.+8      	; 0x10a0 <__addsf3+0x28>
    1098:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_nan>
    109c:	0e f4       	brtc	.+2      	; 0x10a0 <__addsf3+0x28>
    109e:	e0 95       	com	r30
    10a0:	e7 fb       	bst	r30, 7
    10a2:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_inf>

000010a6 <__addsf3x>:
    10a6:	e9 2f       	mov	r30, r25
    10a8:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_split3>
    10ac:	58 f3       	brcs	.-42     	; 0x1084 <__addsf3+0xc>
    10ae:	ba 17       	cp	r27, r26
    10b0:	62 07       	cpc	r22, r18
    10b2:	73 07       	cpc	r23, r19
    10b4:	84 07       	cpc	r24, r20
    10b6:	95 07       	cpc	r25, r21
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__addsf3x+0x1c>
    10ba:	79 f4       	brne	.+30     	; 0x10da <__addsf3x+0x34>
    10bc:	a6 f5       	brtc	.+104    	; 0x1126 <__addsf3x+0x80>
    10be:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_zero>
    10c2:	0e f4       	brtc	.+2      	; 0x10c6 <__addsf3x+0x20>
    10c4:	e0 95       	com	r30
    10c6:	0b 2e       	mov	r0, r27
    10c8:	ba 2f       	mov	r27, r26
    10ca:	a0 2d       	mov	r26, r0
    10cc:	0b 01       	movw	r0, r22
    10ce:	b9 01       	movw	r22, r18
    10d0:	90 01       	movw	r18, r0
    10d2:	0c 01       	movw	r0, r24
    10d4:	ca 01       	movw	r24, r20
    10d6:	a0 01       	movw	r20, r0
    10d8:	11 24       	eor	r1, r1
    10da:	ff 27       	eor	r31, r31
    10dc:	59 1b       	sub	r21, r25
    10de:	99 f0       	breq	.+38     	; 0x1106 <__addsf3x+0x60>
    10e0:	59 3f       	cpi	r21, 0xF9	; 249
    10e2:	50 f4       	brcc	.+20     	; 0x10f8 <__addsf3x+0x52>
    10e4:	50 3e       	cpi	r21, 0xE0	; 224
    10e6:	68 f1       	brcs	.+90     	; 0x1142 <__addsf3x+0x9c>
    10e8:	1a 16       	cp	r1, r26
    10ea:	f0 40       	sbci	r31, 0x00	; 0
    10ec:	a2 2f       	mov	r26, r18
    10ee:	23 2f       	mov	r18, r19
    10f0:	34 2f       	mov	r19, r20
    10f2:	44 27       	eor	r20, r20
    10f4:	58 5f       	subi	r21, 0xF8	; 248
    10f6:	f3 cf       	rjmp	.-26     	; 0x10de <__addsf3x+0x38>
    10f8:	46 95       	lsr	r20
    10fa:	37 95       	ror	r19
    10fc:	27 95       	ror	r18
    10fe:	a7 95       	ror	r26
    1100:	f0 40       	sbci	r31, 0x00	; 0
    1102:	53 95       	inc	r21
    1104:	c9 f7       	brne	.-14     	; 0x10f8 <__addsf3x+0x52>
    1106:	7e f4       	brtc	.+30     	; 0x1126 <__addsf3x+0x80>
    1108:	1f 16       	cp	r1, r31
    110a:	ba 0b       	sbc	r27, r26
    110c:	62 0b       	sbc	r22, r18
    110e:	73 0b       	sbc	r23, r19
    1110:	84 0b       	sbc	r24, r20
    1112:	ba f0       	brmi	.+46     	; 0x1142 <__addsf3x+0x9c>
    1114:	91 50       	subi	r25, 0x01	; 1
    1116:	a1 f0       	breq	.+40     	; 0x1140 <__addsf3x+0x9a>
    1118:	ff 0f       	add	r31, r31
    111a:	bb 1f       	adc	r27, r27
    111c:	66 1f       	adc	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	c2 f7       	brpl	.-16     	; 0x1114 <__addsf3x+0x6e>
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <__addsf3x+0x9c>
    1126:	ba 0f       	add	r27, r26
    1128:	62 1f       	adc	r22, r18
    112a:	73 1f       	adc	r23, r19
    112c:	84 1f       	adc	r24, r20
    112e:	48 f4       	brcc	.+18     	; 0x1142 <__addsf3x+0x9c>
    1130:	87 95       	ror	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f7 95       	ror	r31
    113a:	9e 3f       	cpi	r25, 0xFE	; 254
    113c:	08 f0       	brcs	.+2      	; 0x1140 <__addsf3x+0x9a>
    113e:	b0 cf       	rjmp	.-160    	; 0x10a0 <__addsf3+0x28>
    1140:	93 95       	inc	r25
    1142:	88 0f       	add	r24, r24
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__addsf3x+0xa2>
    1146:	99 27       	eor	r25, r25
    1148:	ee 0f       	add	r30, r30
    114a:	97 95       	ror	r25
    114c:	87 95       	ror	r24
    114e:	08 95       	ret

00001150 <__cmpsf2>:
    1150:	0e 94 92 09 	call	0x1324	; 0x1324 <__fp_cmp>
    1154:	08 f4       	brcc	.+2      	; 0x1158 <__cmpsf2+0x8>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	08 95       	ret

0000115a <__divsf3>:
    115a:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divsf3x>
    115e:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_round>
    1162:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_pscB>
    1166:	58 f0       	brcs	.+22     	; 0x117e <__divsf3+0x24>
    1168:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscA>
    116c:	40 f0       	brcs	.+16     	; 0x117e <__divsf3+0x24>
    116e:	29 f4       	brne	.+10     	; 0x117a <__divsf3+0x20>
    1170:	5f 3f       	cpi	r21, 0xFF	; 255
    1172:	29 f0       	breq	.+10     	; 0x117e <__divsf3+0x24>
    1174:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_inf>
    1178:	51 11       	cpse	r21, r1
    117a:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>
    117e:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_nan>

00001182 <__divsf3x>:
    1182:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_split3>
    1186:	68 f3       	brcs	.-38     	; 0x1162 <__divsf3+0x8>

00001188 <__divsf3_pse>:
    1188:	99 23       	and	r25, r25
    118a:	b1 f3       	breq	.-20     	; 0x1178 <__divsf3+0x1e>
    118c:	55 23       	and	r21, r21
    118e:	91 f3       	breq	.-28     	; 0x1174 <__divsf3+0x1a>
    1190:	95 1b       	sub	r25, r21
    1192:	55 0b       	sbc	r21, r21
    1194:	bb 27       	eor	r27, r27
    1196:	aa 27       	eor	r26, r26
    1198:	62 17       	cp	r22, r18
    119a:	73 07       	cpc	r23, r19
    119c:	84 07       	cpc	r24, r20
    119e:	38 f0       	brcs	.+14     	; 0x11ae <__divsf3_pse+0x26>
    11a0:	9f 5f       	subi	r25, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	44 1f       	adc	r20, r20
    11aa:	aa 1f       	adc	r26, r26
    11ac:	a9 f3       	breq	.-22     	; 0x1198 <__divsf3_pse+0x10>
    11ae:	35 d0       	rcall	.+106    	; 0x121a <__divsf3_pse+0x92>
    11b0:	0e 2e       	mov	r0, r30
    11b2:	3a f0       	brmi	.+14     	; 0x11c2 <__divsf3_pse+0x3a>
    11b4:	e0 e8       	ldi	r30, 0x80	; 128
    11b6:	32 d0       	rcall	.+100    	; 0x121c <__divsf3_pse+0x94>
    11b8:	91 50       	subi	r25, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	e6 95       	lsr	r30
    11be:	00 1c       	adc	r0, r0
    11c0:	ca f7       	brpl	.-14     	; 0x11b4 <__divsf3_pse+0x2c>
    11c2:	2b d0       	rcall	.+86     	; 0x121a <__divsf3_pse+0x92>
    11c4:	fe 2f       	mov	r31, r30
    11c6:	29 d0       	rcall	.+82     	; 0x121a <__divsf3_pse+0x92>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	bb 1f       	adc	r27, r27
    11d0:	26 17       	cp	r18, r22
    11d2:	37 07       	cpc	r19, r23
    11d4:	48 07       	cpc	r20, r24
    11d6:	ab 07       	cpc	r26, r27
    11d8:	b0 e8       	ldi	r27, 0x80	; 128
    11da:	09 f0       	breq	.+2      	; 0x11de <__divsf3_pse+0x56>
    11dc:	bb 0b       	sbc	r27, r27
    11de:	80 2d       	mov	r24, r0
    11e0:	bf 01       	movw	r22, r30
    11e2:	ff 27       	eor	r31, r31
    11e4:	93 58       	subi	r25, 0x83	; 131
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	3a f0       	brmi	.+14     	; 0x11f8 <__divsf3_pse+0x70>
    11ea:	9e 3f       	cpi	r25, 0xFE	; 254
    11ec:	51 05       	cpc	r21, r1
    11ee:	78 f0       	brcs	.+30     	; 0x120e <__divsf3_pse+0x86>
    11f0:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_inf>
    11f4:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	e4 f3       	brlt	.-8      	; 0x11f4 <__divsf3_pse+0x6c>
    11fc:	98 3e       	cpi	r25, 0xE8	; 232
    11fe:	d4 f3       	brlt	.-12     	; 0x11f4 <__divsf3_pse+0x6c>
    1200:	86 95       	lsr	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	b7 95       	ror	r27
    1208:	f7 95       	ror	r31
    120a:	9f 5f       	subi	r25, 0xFF	; 255
    120c:	c9 f7       	brne	.-14     	; 0x1200 <__divsf3_pse+0x78>
    120e:	88 0f       	add	r24, r24
    1210:	91 1d       	adc	r25, r1
    1212:	96 95       	lsr	r25
    1214:	87 95       	ror	r24
    1216:	97 f9       	bld	r25, 7
    1218:	08 95       	ret
    121a:	e1 e0       	ldi	r30, 0x01	; 1
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	bb 1f       	adc	r27, r27
    1224:	62 17       	cp	r22, r18
    1226:	73 07       	cpc	r23, r19
    1228:	84 07       	cpc	r24, r20
    122a:	ba 07       	cpc	r27, r26
    122c:	20 f0       	brcs	.+8      	; 0x1236 <__divsf3_pse+0xae>
    122e:	62 1b       	sub	r22, r18
    1230:	73 0b       	sbc	r23, r19
    1232:	84 0b       	sbc	r24, r20
    1234:	ba 0b       	sbc	r27, r26
    1236:	ee 1f       	adc	r30, r30
    1238:	88 f7       	brcc	.-30     	; 0x121c <__divsf3_pse+0x94>
    123a:	e0 95       	com	r30
    123c:	08 95       	ret

0000123e <__fixsfsi>:
    123e:	0e 94 26 09 	call	0x124c	; 0x124c <__fixunssfsi>
    1242:	68 94       	set
    1244:	b1 11       	cpse	r27, r1
    1246:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>
    124a:	08 95       	ret

0000124c <__fixunssfsi>:
    124c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_splitA>
    1250:	88 f0       	brcs	.+34     	; 0x1274 <__fixunssfsi+0x28>
    1252:	9f 57       	subi	r25, 0x7F	; 127
    1254:	98 f0       	brcs	.+38     	; 0x127c <__fixunssfsi+0x30>
    1256:	b9 2f       	mov	r27, r25
    1258:	99 27       	eor	r25, r25
    125a:	b7 51       	subi	r27, 0x17	; 23
    125c:	b0 f0       	brcs	.+44     	; 0x128a <__fixunssfsi+0x3e>
    125e:	e1 f0       	breq	.+56     	; 0x1298 <__fixunssfsi+0x4c>
    1260:	66 0f       	add	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	88 1f       	adc	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	1a f0       	brmi	.+6      	; 0x1270 <__fixunssfsi+0x24>
    126a:	ba 95       	dec	r27
    126c:	c9 f7       	brne	.-14     	; 0x1260 <__fixunssfsi+0x14>
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <__fixunssfsi+0x4c>
    1270:	b1 30       	cpi	r27, 0x01	; 1
    1272:	91 f0       	breq	.+36     	; 0x1298 <__fixunssfsi+0x4c>
    1274:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_zero>
    1278:	b1 e0       	ldi	r27, 0x01	; 1
    127a:	08 95       	ret
    127c:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_zero>
    1280:	67 2f       	mov	r22, r23
    1282:	78 2f       	mov	r23, r24
    1284:	88 27       	eor	r24, r24
    1286:	b8 5f       	subi	r27, 0xF8	; 248
    1288:	39 f0       	breq	.+14     	; 0x1298 <__fixunssfsi+0x4c>
    128a:	b9 3f       	cpi	r27, 0xF9	; 249
    128c:	cc f3       	brlt	.-14     	; 0x1280 <__fixunssfsi+0x34>
    128e:	86 95       	lsr	r24
    1290:	77 95       	ror	r23
    1292:	67 95       	ror	r22
    1294:	b3 95       	inc	r27
    1296:	d9 f7       	brne	.-10     	; 0x128e <__fixunssfsi+0x42>
    1298:	3e f4       	brtc	.+14     	; 0x12a8 <__fixunssfsi+0x5c>
    129a:	90 95       	com	r25
    129c:	80 95       	com	r24
    129e:	70 95       	com	r23
    12a0:	61 95       	neg	r22
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	8f 4f       	sbci	r24, 0xFF	; 255
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	08 95       	ret

000012aa <__floatunsisf>:
    12aa:	e8 94       	clt
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <__floatsisf+0x12>

000012ae <__floatsisf>:
    12ae:	97 fb       	bst	r25, 7
    12b0:	3e f4       	brtc	.+14     	; 0x12c0 <__floatsisf+0x12>
    12b2:	90 95       	com	r25
    12b4:	80 95       	com	r24
    12b6:	70 95       	com	r23
    12b8:	61 95       	neg	r22
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	99 23       	and	r25, r25
    12c2:	a9 f0       	breq	.+42     	; 0x12ee <__floatsisf+0x40>
    12c4:	f9 2f       	mov	r31, r25
    12c6:	96 e9       	ldi	r25, 0x96	; 150
    12c8:	bb 27       	eor	r27, r27
    12ca:	93 95       	inc	r25
    12cc:	f6 95       	lsr	r31
    12ce:	87 95       	ror	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b7 95       	ror	r27
    12d6:	f1 11       	cpse	r31, r1
    12d8:	f8 cf       	rjmp	.-16     	; 0x12ca <__floatsisf+0x1c>
    12da:	fa f4       	brpl	.+62     	; 0x131a <__floatsisf+0x6c>
    12dc:	bb 0f       	add	r27, r27
    12de:	11 f4       	brne	.+4      	; 0x12e4 <__floatsisf+0x36>
    12e0:	60 ff       	sbrs	r22, 0
    12e2:	1b c0       	rjmp	.+54     	; 0x131a <__floatsisf+0x6c>
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	16 c0       	rjmp	.+44     	; 0x131a <__floatsisf+0x6c>
    12ee:	88 23       	and	r24, r24
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <__floatsisf+0x48>
    12f2:	96 e9       	ldi	r25, 0x96	; 150
    12f4:	11 c0       	rjmp	.+34     	; 0x1318 <__floatsisf+0x6a>
    12f6:	77 23       	and	r23, r23
    12f8:	21 f0       	breq	.+8      	; 0x1302 <__floatsisf+0x54>
    12fa:	9e e8       	ldi	r25, 0x8E	; 142
    12fc:	87 2f       	mov	r24, r23
    12fe:	76 2f       	mov	r23, r22
    1300:	05 c0       	rjmp	.+10     	; 0x130c <__floatsisf+0x5e>
    1302:	66 23       	and	r22, r22
    1304:	71 f0       	breq	.+28     	; 0x1322 <__floatsisf+0x74>
    1306:	96 e8       	ldi	r25, 0x86	; 134
    1308:	86 2f       	mov	r24, r22
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	2a f0       	brmi	.+10     	; 0x131a <__floatsisf+0x6c>
    1310:	9a 95       	dec	r25
    1312:	66 0f       	add	r22, r22
    1314:	77 1f       	adc	r23, r23
    1316:	88 1f       	adc	r24, r24
    1318:	da f7       	brpl	.-10     	; 0x1310 <__floatsisf+0x62>
    131a:	88 0f       	add	r24, r24
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	97 f9       	bld	r25, 7
    1322:	08 95       	ret

00001324 <__fp_cmp>:
    1324:	99 0f       	add	r25, r25
    1326:	00 08       	sbc	r0, r0
    1328:	55 0f       	add	r21, r21
    132a:	aa 0b       	sbc	r26, r26
    132c:	e0 e8       	ldi	r30, 0x80	; 128
    132e:	fe ef       	ldi	r31, 0xFE	; 254
    1330:	16 16       	cp	r1, r22
    1332:	17 06       	cpc	r1, r23
    1334:	e8 07       	cpc	r30, r24
    1336:	f9 07       	cpc	r31, r25
    1338:	c0 f0       	brcs	.+48     	; 0x136a <__fp_cmp+0x46>
    133a:	12 16       	cp	r1, r18
    133c:	13 06       	cpc	r1, r19
    133e:	e4 07       	cpc	r30, r20
    1340:	f5 07       	cpc	r31, r21
    1342:	98 f0       	brcs	.+38     	; 0x136a <__fp_cmp+0x46>
    1344:	62 1b       	sub	r22, r18
    1346:	73 0b       	sbc	r23, r19
    1348:	84 0b       	sbc	r24, r20
    134a:	95 0b       	sbc	r25, r21
    134c:	39 f4       	brne	.+14     	; 0x135c <__fp_cmp+0x38>
    134e:	0a 26       	eor	r0, r26
    1350:	61 f0       	breq	.+24     	; 0x136a <__fp_cmp+0x46>
    1352:	23 2b       	or	r18, r19
    1354:	24 2b       	or	r18, r20
    1356:	25 2b       	or	r18, r21
    1358:	21 f4       	brne	.+8      	; 0x1362 <__fp_cmp+0x3e>
    135a:	08 95       	ret
    135c:	0a 26       	eor	r0, r26
    135e:	09 f4       	brne	.+2      	; 0x1362 <__fp_cmp+0x3e>
    1360:	a1 40       	sbci	r26, 0x01	; 1
    1362:	a6 95       	lsr	r26
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	81 1d       	adc	r24, r1
    1368:	81 1d       	adc	r24, r1
    136a:	08 95       	ret

0000136c <__fp_inf>:
    136c:	97 f9       	bld	r25, 7
    136e:	9f 67       	ori	r25, 0x7F	; 127
    1370:	80 e8       	ldi	r24, 0x80	; 128
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	08 95       	ret

00001378 <__fp_nan>:
    1378:	9f ef       	ldi	r25, 0xFF	; 255
    137a:	80 ec       	ldi	r24, 0xC0	; 192
    137c:	08 95       	ret

0000137e <__fp_pscA>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	16 16       	cp	r1, r22
    1384:	17 06       	cpc	r1, r23
    1386:	18 06       	cpc	r1, r24
    1388:	09 06       	cpc	r0, r25
    138a:	08 95       	ret

0000138c <__fp_pscB>:
    138c:	00 24       	eor	r0, r0
    138e:	0a 94       	dec	r0
    1390:	12 16       	cp	r1, r18
    1392:	13 06       	cpc	r1, r19
    1394:	14 06       	cpc	r1, r20
    1396:	05 06       	cpc	r0, r21
    1398:	08 95       	ret

0000139a <__fp_round>:
    139a:	09 2e       	mov	r0, r25
    139c:	03 94       	inc	r0
    139e:	00 0c       	add	r0, r0
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0xc>
    13a2:	88 23       	and	r24, r24
    13a4:	52 f0       	brmi	.+20     	; 0x13ba <__fp_round+0x20>
    13a6:	bb 0f       	add	r27, r27
    13a8:	40 f4       	brcc	.+16     	; 0x13ba <__fp_round+0x20>
    13aa:	bf 2b       	or	r27, r31
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__fp_round+0x18>
    13ae:	60 ff       	sbrs	r22, 0
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <__fp_round+0x20>
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__fp_split3>:
    13bc:	57 fd       	sbrc	r21, 7
    13be:	90 58       	subi	r25, 0x80	; 128
    13c0:	44 0f       	add	r20, r20
    13c2:	55 1f       	adc	r21, r21
    13c4:	59 f0       	breq	.+22     	; 0x13dc <__fp_splitA+0x10>
    13c6:	5f 3f       	cpi	r21, 0xFF	; 255
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <__fp_splitA+0x1a>
    13ca:	47 95       	ror	r20

000013cc <__fp_splitA>:
    13cc:	88 0f       	add	r24, r24
    13ce:	97 fb       	bst	r25, 7
    13d0:	99 1f       	adc	r25, r25
    13d2:	61 f0       	breq	.+24     	; 0x13ec <__fp_splitA+0x20>
    13d4:	9f 3f       	cpi	r25, 0xFF	; 255
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <__fp_splitA+0x2a>
    13d8:	87 95       	ror	r24
    13da:	08 95       	ret
    13dc:	12 16       	cp	r1, r18
    13de:	13 06       	cpc	r1, r19
    13e0:	14 06       	cpc	r1, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	f2 cf       	rjmp	.-28     	; 0x13ca <__fp_split3+0xe>
    13e6:	46 95       	lsr	r20
    13e8:	f1 df       	rcall	.-30     	; 0x13cc <__fp_splitA>
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <__fp_splitA+0x30>
    13ec:	16 16       	cp	r1, r22
    13ee:	17 06       	cpc	r1, r23
    13f0:	18 06       	cpc	r1, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	f1 cf       	rjmp	.-30     	; 0x13d8 <__fp_splitA+0xc>
    13f6:	86 95       	lsr	r24
    13f8:	71 05       	cpc	r23, r1
    13fa:	61 05       	cpc	r22, r1
    13fc:	08 94       	sec
    13fe:	08 95       	ret

00001400 <__fp_zero>:
    1400:	e8 94       	clt

00001402 <__fp_szero>:
    1402:	bb 27       	eor	r27, r27
    1404:	66 27       	eor	r22, r22
    1406:	77 27       	eor	r23, r23
    1408:	cb 01       	movw	r24, r22
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret

0000140e <__gesf2>:
    140e:	0e 94 92 09 	call	0x1324	; 0x1324 <__fp_cmp>
    1412:	08 f4       	brcc	.+2      	; 0x1416 <__gesf2+0x8>
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	08 95       	ret

00001418 <__mulsf3>:
    1418:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3x>
    141c:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_round>
    1420:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscA>
    1424:	38 f0       	brcs	.+14     	; 0x1434 <__mulsf3+0x1c>
    1426:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_pscB>
    142a:	20 f0       	brcs	.+8      	; 0x1434 <__mulsf3+0x1c>
    142c:	95 23       	and	r25, r21
    142e:	11 f0       	breq	.+4      	; 0x1434 <__mulsf3+0x1c>
    1430:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_inf>
    1434:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_nan>
    1438:	11 24       	eor	r1, r1
    143a:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>

0000143e <__mulsf3x>:
    143e:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_split3>
    1442:	70 f3       	brcs	.-36     	; 0x1420 <__mulsf3+0x8>

00001444 <__mulsf3_pse>:
    1444:	95 9f       	mul	r25, r21
    1446:	c1 f3       	breq	.-16     	; 0x1438 <__mulsf3+0x20>
    1448:	95 0f       	add	r25, r21
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	55 1f       	adc	r21, r21
    144e:	62 9f       	mul	r22, r18
    1450:	f0 01       	movw	r30, r0
    1452:	72 9f       	mul	r23, r18
    1454:	bb 27       	eor	r27, r27
    1456:	f0 0d       	add	r31, r0
    1458:	b1 1d       	adc	r27, r1
    145a:	63 9f       	mul	r22, r19
    145c:	aa 27       	eor	r26, r26
    145e:	f0 0d       	add	r31, r0
    1460:	b1 1d       	adc	r27, r1
    1462:	aa 1f       	adc	r26, r26
    1464:	64 9f       	mul	r22, r20
    1466:	66 27       	eor	r22, r22
    1468:	b0 0d       	add	r27, r0
    146a:	a1 1d       	adc	r26, r1
    146c:	66 1f       	adc	r22, r22
    146e:	82 9f       	mul	r24, r18
    1470:	22 27       	eor	r18, r18
    1472:	b0 0d       	add	r27, r0
    1474:	a1 1d       	adc	r26, r1
    1476:	62 1f       	adc	r22, r18
    1478:	73 9f       	mul	r23, r19
    147a:	b0 0d       	add	r27, r0
    147c:	a1 1d       	adc	r26, r1
    147e:	62 1f       	adc	r22, r18
    1480:	83 9f       	mul	r24, r19
    1482:	a0 0d       	add	r26, r0
    1484:	61 1d       	adc	r22, r1
    1486:	22 1f       	adc	r18, r18
    1488:	74 9f       	mul	r23, r20
    148a:	33 27       	eor	r19, r19
    148c:	a0 0d       	add	r26, r0
    148e:	61 1d       	adc	r22, r1
    1490:	23 1f       	adc	r18, r19
    1492:	84 9f       	mul	r24, r20
    1494:	60 0d       	add	r22, r0
    1496:	21 1d       	adc	r18, r1
    1498:	82 2f       	mov	r24, r18
    149a:	76 2f       	mov	r23, r22
    149c:	6a 2f       	mov	r22, r26
    149e:	11 24       	eor	r1, r1
    14a0:	9f 57       	subi	r25, 0x7F	; 127
    14a2:	50 40       	sbci	r21, 0x00	; 0
    14a4:	9a f0       	brmi	.+38     	; 0x14cc <__mulsf3_pse+0x88>
    14a6:	f1 f0       	breq	.+60     	; 0x14e4 <__mulsf3_pse+0xa0>
    14a8:	88 23       	and	r24, r24
    14aa:	4a f0       	brmi	.+18     	; 0x14be <__mulsf3_pse+0x7a>
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	bb 1f       	adc	r27, r27
    14b2:	66 1f       	adc	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	88 1f       	adc	r24, r24
    14b8:	91 50       	subi	r25, 0x01	; 1
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	a9 f7       	brne	.-22     	; 0x14a8 <__mulsf3_pse+0x64>
    14be:	9e 3f       	cpi	r25, 0xFE	; 254
    14c0:	51 05       	cpc	r21, r1
    14c2:	80 f0       	brcs	.+32     	; 0x14e4 <__mulsf3_pse+0xa0>
    14c4:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_inf>
    14c8:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>
    14cc:	5f 3f       	cpi	r21, 0xFF	; 255
    14ce:	e4 f3       	brlt	.-8      	; 0x14c8 <__mulsf3_pse+0x84>
    14d0:	98 3e       	cpi	r25, 0xE8	; 232
    14d2:	d4 f3       	brlt	.-12     	; 0x14c8 <__mulsf3_pse+0x84>
    14d4:	86 95       	lsr	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b7 95       	ror	r27
    14dc:	f7 95       	ror	r31
    14de:	e7 95       	ror	r30
    14e0:	9f 5f       	subi	r25, 0xFF	; 255
    14e2:	c1 f7       	brne	.-16     	; 0x14d4 <__mulsf3_pse+0x90>
    14e4:	fe 2b       	or	r31, r30
    14e6:	88 0f       	add	r24, r24
    14e8:	91 1d       	adc	r25, r1
    14ea:	96 95       	lsr	r25
    14ec:	87 95       	ror	r24
    14ee:	97 f9       	bld	r25, 7
    14f0:	08 95       	ret

000014f2 <__udivmodsi4>:
    14f2:	a1 e2       	ldi	r26, 0x21	; 33
    14f4:	1a 2e       	mov	r1, r26
    14f6:	aa 1b       	sub	r26, r26
    14f8:	bb 1b       	sub	r27, r27
    14fa:	fd 01       	movw	r30, r26
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <__udivmodsi4_ep>

000014fe <__udivmodsi4_loop>:
    14fe:	aa 1f       	adc	r26, r26
    1500:	bb 1f       	adc	r27, r27
    1502:	ee 1f       	adc	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	a2 17       	cp	r26, r18
    1508:	b3 07       	cpc	r27, r19
    150a:	e4 07       	cpc	r30, r20
    150c:	f5 07       	cpc	r31, r21
    150e:	20 f0       	brcs	.+8      	; 0x1518 <__udivmodsi4_ep>
    1510:	a2 1b       	sub	r26, r18
    1512:	b3 0b       	sbc	r27, r19
    1514:	e4 0b       	sbc	r30, r20
    1516:	f5 0b       	sbc	r31, r21

00001518 <__udivmodsi4_ep>:
    1518:	66 1f       	adc	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	1a 94       	dec	r1
    1522:	69 f7       	brne	.-38     	; 0x14fe <__udivmodsi4_loop>
    1524:	60 95       	com	r22
    1526:	70 95       	com	r23
    1528:	80 95       	com	r24
    152a:	90 95       	com	r25
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	bd 01       	movw	r22, r26
    1532:	cf 01       	movw	r24, r30
    1534:	08 95       	ret

00001536 <_exit>:
    1536:	f8 94       	cli

00001538 <__stop_program>:
    1538:	ff cf       	rjmp	.-2      	; 0x1538 <__stop_program>
