
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800078  00800078  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b41  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e6  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00001ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f7  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002599  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#include "MCAL\UART\UART.h"

int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2b 97       	sbiw	r28, 0x0b	; 11
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t character = 0;
	ST_UARTConfig_t config = {FREQ_8MHz,BAUD_9600,EVEN_PARITY,DISABLE_RX_INT,DISABLE_TX_INT};
  a6:	8b e0       	ldi	r24, 0x0B	; 11
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
		
	UART_Init(config);
  b8:	e9 80       	ldd	r14, Y+1	; 0x01
  ba:	fa 80       	ldd	r15, Y+2	; 0x02
  bc:	0b 81       	ldd	r16, Y+3	; 0x03
  be:	1c 81       	ldd	r17, Y+4	; 0x04
  c0:	2d 81       	ldd	r18, Y+5	; 0x05
  c2:	3e 81       	ldd	r19, Y+6	; 0x06
  c4:	4f 81       	ldd	r20, Y+7	; 0x07
  c6:	58 85       	ldd	r21, Y+8	; 0x08
  c8:	69 85       	ldd	r22, Y+9	; 0x09
  ca:	7a 85       	ldd	r23, Y+10	; 0x0a
  cc:	8b 85       	ldd	r24, Y+11	; 0x0b
  ce:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Init>
	UART_SendString("Eslam Emara");
  d2:	8b e6       	ldi	r24, 0x6B	; 107
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 05 01 	call	0x20a	; 0x20a <UART_SendString>
	
	while(1)
	{
		character=UART_ReceiveByte();
  da:	0e 94 01 01 	call	0x202	; 0x202 <UART_ReceiveByte>
		UART_SendByte(character);
  de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <UART_SendByte>
  e2:	fb cf       	rjmp	.-10     	; 0xda <main+0x48>

000000e4 <UART_Init>:
*inputs: adrress of function to call every transmission complete
*return: none
*
*/
void UART_SetTXCompleteISR(void (*function)(void)){
	TX_ISR = function;
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2b 97       	sbiw	r28, 0x0b	; 11
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	e9 82       	std	Y+1, r14	; 0x01
 102:	fa 82       	std	Y+2, r15	; 0x02
 104:	0b 83       	std	Y+3, r16	; 0x03
 106:	1c 83       	std	Y+4, r17	; 0x04
 108:	2d 83       	std	Y+5, r18	; 0x05
 10a:	3e 83       	std	Y+6, r19	; 0x06
 10c:	4f 83       	std	Y+7, r20	; 0x07
 10e:	58 87       	std	Y+8, r21	; 0x08
 110:	69 87       	std	Y+9, r22	; 0x09
 112:	7a 87       	std	Y+10, r23	; 0x0a
 114:	8b 87       	std	Y+11, r24	; 0x0b
 116:	69 81       	ldd	r22, Y+1	; 0x01
 118:	7a 81       	ldd	r23, Y+2	; 0x02
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	0d 81       	ldd	r16, Y+5	; 0x05
 120:	1e 81       	ldd	r17, Y+6	; 0x06
 122:	2f 81       	ldd	r18, Y+7	; 0x07
 124:	38 85       	ldd	r19, Y+8	; 0x08
 126:	00 0f       	add	r16, r16
 128:	11 1f       	adc	r17, r17
 12a:	22 1f       	adc	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	00 0f       	add	r16, r16
 130:	11 1f       	adc	r17, r17
 132:	22 1f       	adc	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	a9 01       	movw	r20, r18
 138:	98 01       	movw	r18, r16
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	44 1f       	adc	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	44 1f       	adc	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodsi4>
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 61       	ori	r24, 0x10	; 16
 156:	8a b9       	out	0x0a, r24	; 10
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	29 b9       	out	0x09, r18	; 9
 160:	80 b5       	in	r24, 0x20	; 32
 162:	8f 77       	andi	r24, 0x7F	; 127
 164:	80 bd       	out	0x20, r24	; 32
 166:	30 bd       	out	0x20, r19	; 32
 168:	80 b5       	in	r24, 0x20	; 32
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	80 bd       	out	0x20, r24	; 32
 16e:	80 b5       	in	r24, 0x20	; 32
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	80 bd       	out	0x20, r24	; 32
 174:	89 85       	ldd	r24, Y+9	; 0x09
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	39 f4       	brne	.+14     	; 0x188 <UART_Init+0xa4>
 17a:	80 b5       	in	r24, 0x20	; 32
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	80 bd       	out	0x20, r24	; 32
 180:	80 b5       	in	r24, 0x20	; 32
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	80 bd       	out	0x20, r24	; 32
 186:	11 c0       	rjmp	.+34     	; 0x1aa <UART_Init+0xc6>
 188:	81 11       	cpse	r24, r1
 18a:	07 c0       	rjmp	.+14     	; 0x19a <UART_Init+0xb6>
 18c:	80 b5       	in	r24, 0x20	; 32
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	80 bd       	out	0x20, r24	; 32
 192:	80 b5       	in	r24, 0x20	; 32
 194:	80 61       	ori	r24, 0x10	; 16
 196:	80 bd       	out	0x20, r24	; 32
 198:	08 c0       	rjmp	.+16     	; 0x1aa <UART_Init+0xc6>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	31 f4       	brne	.+12     	; 0x1aa <UART_Init+0xc6>
 19e:	80 b5       	in	r24, 0x20	; 32
 1a0:	8f 7d       	andi	r24, 0xDF	; 223
 1a2:	80 bd       	out	0x20, r24	; 32
 1a4:	80 b5       	in	r24, 0x20	; 32
 1a6:	8f 7e       	andi	r24, 0xEF	; 239
 1a8:	80 bd       	out	0x20, r24	; 32
 1aa:	80 b5       	in	r24, 0x20	; 32
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	80 bd       	out	0x20, r24	; 32
 1b0:	80 b5       	in	r24, 0x20	; 32
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	80 bd       	out	0x20, r24	; 32
 1b6:	8a 85       	ldd	r24, Y+10	; 0x0a
 1b8:	81 11       	cpse	r24, r1
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <UART_Init+0xe4>
 1bc:	8f b7       	in	r24, 0x3f	; 63
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8f bf       	out	0x3f, r24	; 63
 1c2:	8a b1       	in	r24, 0x0a	; 10
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	8a b9       	out	0x0a, r24	; 10
 1c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ca:	81 11       	cpse	r24, r1
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <UART_Init+0xf6>
 1ce:	8f b7       	in	r24, 0x3f	; 63
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8f bf       	out	0x3f, r24	; 63
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	8a b9       	out	0x0a, r24	; 10
 1da:	2b 96       	adiw	r28, 0x0b	; 11
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <UART_SendByte>:
 1f4:	5d 9b       	sbis	0x0b, 5	; 11
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <UART_SendByte>
 1f8:	8c b9       	out	0x0c, r24	; 12
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	80 64       	ori	r24, 0x40	; 64
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	08 95       	ret

00000202 <UART_ReceiveByte>:
 202:	5f 9b       	sbis	0x0b, 7	; 11
 204:	fe cf       	rjmp	.-4      	; 0x202 <UART_ReceiveByte>
 206:	8c b1       	in	r24, 0x0c	; 12
 208:	08 95       	ret

0000020a <UART_SendString>:
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	8c 01       	movw	r16, r24
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	03 c0       	rjmp	.+6      	; 0x21c <UART_SendString+0x12>
 216:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <UART_SendByte>
 21a:	cf 5f       	subi	r28, 0xFF	; 255
 21c:	f8 01       	movw	r30, r16
 21e:	ec 0f       	add	r30, r28
 220:	f1 1d       	adc	r31, r1
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	f7 cf       	rjmp	.-18     	; 0x216 <UART_SendString+0xc>
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <__vector_13>:
}


/*ISRs*/
void __vector_13(){
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	RX_ISR();
 252:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end>
 256:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x1>
 25a:	09 95       	icall
	SETBIT(UCSRA,7);
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	8b b9       	out	0x0b, r24	; 11
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_15>:

void __vector_15(){
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
	TX_ISR();
 2a6:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TX_ISR>
 2aa:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TX_ISR+0x1>
 2ae:	09 95       	icall
	SETBIT(UCSRA,6);
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	8b b9       	out	0x0b, r24	; 11

}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <__udivmodsi4>:
 2d8:	a1 e2       	ldi	r26, 0x21	; 33
 2da:	1a 2e       	mov	r1, r26
 2dc:	aa 1b       	sub	r26, r26
 2de:	bb 1b       	sub	r27, r27
 2e0:	fd 01       	movw	r30, r26
 2e2:	0d c0       	rjmp	.+26     	; 0x2fe <__udivmodsi4_ep>

000002e4 <__udivmodsi4_loop>:
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	ee 1f       	adc	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	a2 17       	cp	r26, r18
 2ee:	b3 07       	cpc	r27, r19
 2f0:	e4 07       	cpc	r30, r20
 2f2:	f5 07       	cpc	r31, r21
 2f4:	20 f0       	brcs	.+8      	; 0x2fe <__udivmodsi4_ep>
 2f6:	a2 1b       	sub	r26, r18
 2f8:	b3 0b       	sbc	r27, r19
 2fa:	e4 0b       	sbc	r30, r20
 2fc:	f5 0b       	sbc	r31, r21

000002fe <__udivmodsi4_ep>:
 2fe:	66 1f       	adc	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	1a 94       	dec	r1
 308:	69 f7       	brne	.-38     	; 0x2e4 <__udivmodsi4_loop>
 30a:	60 95       	com	r22
 30c:	70 95       	com	r23
 30e:	80 95       	com	r24
 310:	90 95       	com	r25
 312:	9b 01       	movw	r18, r22
 314:	ac 01       	movw	r20, r24
 316:	bd 01       	movw	r22, r26
 318:	cf 01       	movw	r24, r30
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
